
thread-assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e90  08006e90  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006e90  08006e90  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e90  08006e90  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08006e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          00001dcc  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e9c  20001e9c  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001668a  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b06  00000000  00000000  0003678a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00039290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  0003a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002df7  00000000  00000000  0003adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011405  00000000  00000000  0003dbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c91e8  00000000  00000000  0004efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001181ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003984  00000000  00000000  00118200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c10 	.word	0x08006c10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	08006c10 	.word	0x08006c10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <InitLED>:
void StartTask03(void *argument);
void StartTask04(void *argument);

/* USER CODE BEGIN PFP */
void InitLED()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN;
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <InitLED+0x7c>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <InitLED+0x7c>)
 800020e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000212:	6153      	str	r3, [r2, #20]
	//led PA0
	GPIOA -> MODER |= GPIO_MODER_MODER0_0;
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(GPIO_MODER_MODER0_1);
 8000224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022e:	f023 0302 	bic.w	r3, r3, #2
 8000232:	6013      	str	r3, [r2, #0]
	//

	//led PA1
	GPIOA -> MODER |= GPIO_MODER_MODER1_0;
 8000234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(GPIO_MODER_MODER1_1);
 8000244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024e:	f023 0308 	bic.w	r3, r3, #8
 8000252:	6013      	str	r3, [r2, #0]
	//

	//led PA4
	GPIOA -> MODER |= GPIO_MODER_MODER4_0;
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(GPIO_MODER_MODER4_1);
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000272:	6013      	str	r3, [r2, #0]
	//
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000

08000284 <sprinkler1On>:

void sprinkler1On()
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_ODR_0;
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <sprinkler2On>:
void sprinkler2On()
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_ODR_1;
 80002a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6153      	str	r3, [r2, #20]
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <sprinkler3On>:
void sprinkler3On()
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= GPIO_ODR_4;
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6153      	str	r3, [r2, #20]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <sprinkler1Off>:
void sprinkler1Off()
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_ODR_0;
 80002e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ec:	f023 0301 	bic.w	r3, r3, #1
 80002f0:	6153      	str	r3, [r2, #20]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <sprinkler2Off>:
void sprinkler2Off()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_ODR_1;
 8000300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030a:	f023 0302 	bic.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <sprinkler3Off>:
void sprinkler3Off()
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~GPIO_ODR_4;
 800031e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000328:	f023 0310 	bic.w	r3, r3, #16
 800032c:	6153      	str	r3, [r2, #20]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <executeScene>:
void executeScene(int sceneNum)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	int itNum = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
	char scene[10];
	osMessageQueueId_t handler;
	switch (sceneNum)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d024      	beq.n	8000394 <executeScene+0x5c>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2b03      	cmp	r3, #3
 800034e:	f300 80d3 	bgt.w	80004f8 <executeScene+0x1c0>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d003      	beq.n	8000360 <executeScene+0x28>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d00d      	beq.n	800037a <executeScene+0x42>
		handler = scene3QueueHandle;
		itNum = 6;
		osMutexAcquire(scene3MutexHandle, osWaitForever);
		break;
	default:
		return;
 800035e:	e0cb      	b.n	80004f8 <executeScene+0x1c0>
		handler = scene1QueueHandle;
 8000360:	4b67      	ldr	r3, [pc, #412]	; (8000500 <executeScene+0x1c8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	61bb      	str	r3, [r7, #24]
		itNum = 6;
 8000366:	2306      	movs	r3, #6
 8000368:	61fb      	str	r3, [r7, #28]
		osMutexAcquire(scene1MutexHandle, osWaitForever);
 800036a:	4b66      	ldr	r3, [pc, #408]	; (8000504 <executeScene+0x1cc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f04f 31ff 	mov.w	r1, #4294967295
 8000372:	4618      	mov	r0, r3
 8000374:	f003 f972 	bl	800365c <osMutexAcquire>
		break;
 8000378:	e019      	b.n	80003ae <executeScene+0x76>
		handler = scene2QueueHandle;
 800037a:	4b63      	ldr	r3, [pc, #396]	; (8000508 <executeScene+0x1d0>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	61bb      	str	r3, [r7, #24]
		itNum = 7;
 8000380:	2307      	movs	r3, #7
 8000382:	61fb      	str	r3, [r7, #28]
		osMutexAcquire(scene2MutexHandle, osWaitForever);
 8000384:	4b61      	ldr	r3, [pc, #388]	; (800050c <executeScene+0x1d4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 31ff 	mov.w	r1, #4294967295
 800038c:	4618      	mov	r0, r3
 800038e:	f003 f965 	bl	800365c <osMutexAcquire>
		break;
 8000392:	e00c      	b.n	80003ae <executeScene+0x76>
		handler = scene3QueueHandle;
 8000394:	4b5e      	ldr	r3, [pc, #376]	; (8000510 <executeScene+0x1d8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	61bb      	str	r3, [r7, #24]
		itNum = 6;
 800039a:	2306      	movs	r3, #6
 800039c:	61fb      	str	r3, [r7, #28]
		osMutexAcquire(scene3MutexHandle, osWaitForever);
 800039e:	4b5d      	ldr	r3, [pc, #372]	; (8000514 <executeScene+0x1dc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 31ff 	mov.w	r1, #4294967295
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 f958 	bl	800365c <osMutexAcquire>
		break;
 80003ac:	bf00      	nop
		break;
	}

	for (int i = 0; i<itNum; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e07d      	b.n	80004b0 <executeScene+0x178>
			 {
		osMessageQueueGet(handler, (void *)scene, 1, osWaitForever);
 80003b4:	f107 0108 	add.w	r1, r7, #8
 80003b8:	f04f 33ff 	mov.w	r3, #4294967295
 80003bc:	2201      	movs	r2, #1
 80003be:	69b8      	ldr	r0, [r7, #24]
 80003c0:	f003 faf4 	bl	80039ac <osMessageQueueGet>
			    if (strcmp(scene,"spr1on")==0)
 80003c4:	f107 0308 	add.w	r3, r7, #8
 80003c8:	4953      	ldr	r1, [pc, #332]	; (8000518 <executeScene+0x1e0>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff08 	bl	80001e0 <strcmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d108      	bne.n	80003e8 <executeScene+0xb0>
			    {
			    	osMutexAcquire(sprinkler1MutexHandle, osWaitForever);
 80003d6:	4b51      	ldr	r3, [pc, #324]	; (800051c <executeScene+0x1e4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f04f 31ff 	mov.w	r1, #4294967295
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f93c 	bl	800365c <osMutexAcquire>
			  	    sprinkler1On();
 80003e4:	f7ff ff4e 	bl	8000284 <sprinkler1On>
			    }
			  	if (strcmp(scene,"spr1off")==0)
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	494c      	ldr	r1, [pc, #304]	; (8000520 <executeScene+0x1e8>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff fef6 	bl	80001e0 <strcmp>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d106      	bne.n	8000408 <executeScene+0xd0>
			  	{
			  		sprinkler1Off();
 80003fa:	f7ff ff70 	bl	80002de <sprinkler1Off>
			  		osMutexRelease(sprinkler1MutexHandle);
 80003fe:	4b47      	ldr	r3, [pc, #284]	; (800051c <executeScene+0x1e4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4618      	mov	r0, r3
 8000404:	f003 f988 	bl	8003718 <osMutexRelease>
			  	}
			  	if (strcmp(scene,"spr2on")==0)
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	4945      	ldr	r1, [pc, #276]	; (8000524 <executeScene+0x1ec>)
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fee6 	bl	80001e0 <strcmp>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d108      	bne.n	800042c <executeScene+0xf4>
			  	{
			  		osMutexAcquire(sprinkler2MutexHandle, osWaitForever);
 800041a:	4b43      	ldr	r3, [pc, #268]	; (8000528 <executeScene+0x1f0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f04f 31ff 	mov.w	r1, #4294967295
 8000422:	4618      	mov	r0, r3
 8000424:	f003 f91a 	bl	800365c <osMutexAcquire>
			  		sprinkler2On();
 8000428:	f7ff ff3b 	bl	80002a2 <sprinkler2On>
			  	}
			  	if (strcmp(scene,"spr2off")==0)
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	493e      	ldr	r1, [pc, #248]	; (800052c <executeScene+0x1f4>)
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff fed4 	bl	80001e0 <strcmp>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d106      	bne.n	800044c <executeScene+0x114>
			  	{
			  		sprinkler2Off();
 800043e:	f7ff ff5d 	bl	80002fc <sprinkler2Off>
			  		osMutexRelease(sprinkler2MutexHandle);
 8000442:	4b39      	ldr	r3, [pc, #228]	; (8000528 <executeScene+0x1f0>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f003 f966 	bl	8003718 <osMutexRelease>
			  	}
			  	if (strcmp(scene,"spr3on")==0)
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4937      	ldr	r1, [pc, #220]	; (8000530 <executeScene+0x1f8>)
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fec4 	bl	80001e0 <strcmp>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d108      	bne.n	8000470 <executeScene+0x138>
			  	{
			  		osMutexAcquire(sprinkler3MutexHandle, osWaitForever);
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <executeScene+0x1fc>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f04f 31ff 	mov.w	r1, #4294967295
 8000466:	4618      	mov	r0, r3
 8000468:	f003 f8f8 	bl	800365c <osMutexAcquire>
			  		sprinkler3On();
 800046c:	f7ff ff28 	bl	80002c0 <sprinkler3On>
			  	}
			  	if (strcmp(scene,"spr3off")==0)
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	4930      	ldr	r1, [pc, #192]	; (8000538 <executeScene+0x200>)
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff feb2 	bl	80001e0 <strcmp>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d106      	bne.n	8000490 <executeScene+0x158>
			  	{
			    	sprinkler3Off();
 8000482:	f7ff ff4a 	bl	800031a <sprinkler3Off>
			        osMutexRelease(sprinkler3MutexHandle);
 8000486:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <executeScene+0x1fc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f003 f944 	bl	8003718 <osMutexRelease>
			   	}
			  	if (strcmp(scene,"wait5")==0)
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4929      	ldr	r1, [pc, #164]	; (800053c <executeScene+0x204>)
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff fea2 	bl	80001e0 <strcmp>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d103      	bne.n	80004aa <executeScene+0x172>
			  	{
			  	  	  	  osDelay(5000);
 80004a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80004a6:	f003 f811 	bl	80034cc <osDelay>
	for (int i = 0; i<itNum; i++)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	f6ff af7d 	blt.w	80003b4 <executeScene+0x7c>
			  	}
	  }


	 switch (sceneNum)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d015      	beq.n	80004ec <executeScene+0x1b4>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b03      	cmp	r3, #3
 80004c4:	dc19      	bgt.n	80004fa <executeScene+0x1c2>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d003      	beq.n	80004d4 <executeScene+0x19c>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d006      	beq.n	80004e0 <executeScene+0x1a8>
 80004d2:	e012      	b.n	80004fa <executeScene+0x1c2>
	 	{
	 	case 1:
	 		osMutexRelease(scene1MutexHandle);
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <executeScene+0x1cc>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 f91d 	bl	8003718 <osMutexRelease>
	 		break;
 80004de:	e00c      	b.n	80004fa <executeScene+0x1c2>
	 	case 2:
	 		osMutexRelease(scene2MutexHandle);
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <executeScene+0x1d4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 f917 	bl	8003718 <osMutexRelease>
	 		break;
 80004ea:	e006      	b.n	80004fa <executeScene+0x1c2>
	 	case 3:
	 		osMutexRelease(scene3MutexHandle);
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <executeScene+0x1dc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 f911 	bl	8003718 <osMutexRelease>
	 		break;
 80004f6:	e000      	b.n	80004fa <executeScene+0x1c2>
		return;
 80004f8:	bf00      	nop
	 	}
}
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20001dc8 	.word	0x20001dc8
 8000504:	20001e54 	.word	0x20001e54
 8000508:	20001db8 	.word	0x20001db8
 800050c:	20001dcc 	.word	0x20001dcc
 8000510:	20001da4 	.word	0x20001da4
 8000514:	20001da8 	.word	0x20001da8
 8000518:	08006cc4 	.word	0x08006cc4
 800051c:	20001dbc 	.word	0x20001dbc
 8000520:	08006ccc 	.word	0x08006ccc
 8000524:	08006cd4 	.word	0x08006cd4
 8000528:	20001dac 	.word	0x20001dac
 800052c:	08006cdc 	.word	0x08006cdc
 8000530:	08006ce4 	.word	0x08006ce4
 8000534:	20001db0 	.word	0x20001db0
 8000538:	08006cec 	.word	0x08006cec
 800053c:	08006cf4 	.word	0x08006cf4

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fad0 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f87a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8fa 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f8c8 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  InitLED();
 8000554:	f7ff fe56 	bl	8000204 <InitLED>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f002 fe40 	bl	80031dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sprinkler1Mutex */
  sprinkler1MutexHandle = osMutexNew(&sprinkler1Mutex_attributes);
 800055c:	4823      	ldr	r0, [pc, #140]	; (80005ec <main+0xac>)
 800055e:	f002 ffe3 	bl	8003528 <osMutexNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <main+0xb0>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of sprinkler2Mutex */
  sprinkler2MutexHandle = osMutexNew(&sprinkler2Mutex_attributes);
 8000568:	4822      	ldr	r0, [pc, #136]	; (80005f4 <main+0xb4>)
 800056a:	f002 ffdd 	bl	8003528 <osMutexNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <main+0xb8>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of sprinkler3Mutex */
  sprinkler3MutexHandle = osMutexNew(&sprinkler3Mutex_attributes);
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <main+0xbc>)
 8000576:	f002 ffd7 	bl	8003528 <osMutexNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <main+0xc0>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of scene1Mutex */
  scene1MutexHandle = osMutexNew(&scene1Mutex_attributes);
 8000580:	4820      	ldr	r0, [pc, #128]	; (8000604 <main+0xc4>)
 8000582:	f002 ffd1 	bl	8003528 <osMutexNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <main+0xc8>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of scene2Mutex */
  scene2MutexHandle = osMutexNew(&scene2Mutex_attributes);
 800058c:	481f      	ldr	r0, [pc, #124]	; (800060c <main+0xcc>)
 800058e:	f002 ffcb 	bl	8003528 <osMutexNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <main+0xd0>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of scene3Mutex */
  scene3MutexHandle = osMutexNew(&scene3Mutex_attributes);
 8000598:	481e      	ldr	r0, [pc, #120]	; (8000614 <main+0xd4>)
 800059a:	f002 ffc5 	bl	8003528 <osMutexNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <main+0xd8>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of scene1Queue */
  scene1QueueHandle = osMessageQueueNew (16, sizeof(char[10]), &scene1Queue_attributes);
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <main+0xdc>)
 80005a6:	210a      	movs	r1, #10
 80005a8:	2010      	movs	r0, #16
 80005aa:	f003 f905 	bl	80037b8 <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <main+0xe0>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of scene2Queue */
  scene2QueueHandle = osMessageQueueNew (16, sizeof(char[10]), &scene2Queue_attributes);
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <main+0xe4>)
 80005b6:	210a      	movs	r1, #10
 80005b8:	2010      	movs	r0, #16
 80005ba:	f003 f8fd 	bl	80037b8 <osMessageQueueNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <main+0xe8>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of scene3Queue */
  scene3QueueHandle = osMessageQueueNew (16, sizeof(char[10]), &scene3Queue_attributes);
 80005c4:	4a19      	ldr	r2, [pc, #100]	; (800062c <main+0xec>)
 80005c6:	210a      	movs	r1, #10
 80005c8:	2010      	movs	r0, #16
 80005ca:	f003 f8f5 	bl	80037b8 <osMessageQueueNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <main+0xf0>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <main+0xf4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4817      	ldr	r0, [pc, #92]	; (8000638 <main+0xf8>)
 80005da:	f002 fe67 	bl	80032ac <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <main+0xfc>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f002 fe2e 	bl	8003244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0xa8>
 80005ea:	bf00      	nop
 80005ec:	08006df8 	.word	0x08006df8
 80005f0:	20001dbc 	.word	0x20001dbc
 80005f4:	08006e08 	.word	0x08006e08
 80005f8:	20001dac 	.word	0x20001dac
 80005fc:	08006e18 	.word	0x08006e18
 8000600:	20001db0 	.word	0x20001db0
 8000604:	08006e28 	.word	0x08006e28
 8000608:	20001e54 	.word	0x20001e54
 800060c:	08006e38 	.word	0x08006e38
 8000610:	20001dcc 	.word	0x20001dcc
 8000614:	08006e48 	.word	0x08006e48
 8000618:	20001da8 	.word	0x20001da8
 800061c:	08006db0 	.word	0x08006db0
 8000620:	20001dc8 	.word	0x20001dc8
 8000624:	08006dc8 	.word	0x08006dc8
 8000628:	20001db8 	.word	0x20001db8
 800062c:	08006de0 	.word	0x08006de0
 8000630:	20001da4 	.word	0x20001da4
 8000634:	08006d20 	.word	0x08006d20
 8000638:	08000775 	.word	0x08000775
 800063c:	20001da0 	.word	0x20001da0

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0a6      	sub	sp, #152	; 0x98
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fad6 	bl	8006c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2258      	movs	r2, #88	; 0x58
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fac8 	bl	8006c00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd03 	bl	8001094 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000694:	f000 f959 	bl	800094a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fc04 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006be:	f000 f944 	bl	800094a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fe2d 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 f937 	bl	800094a <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3798      	adds	r7, #152	; 0x98
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART2_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x58>)
 8000728:	f002 f81e 	bl	8002768 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f90a 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20001dd0 	.word	0x20001dd0
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_GPIO_Init+0x2c>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <MX_GPIO_Init+0x2c>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_GPIO_Init+0x2c>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	memset(UARTinput, 0, 10);
 800077c:	220a      	movs	r2, #10
 800077e:	2100      	movs	r1, #0
 8000780:	4844      	ldr	r0, [pc, #272]	; (8000894 <StartDefaultTask+0x120>)
 8000782:	f006 fa3d 	bl	8006c00 <memset>
    HAL_UART_Receive(&huart2, (void *)UARTinput, 10, 100);
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	220a      	movs	r2, #10
 800078a:	4942      	ldr	r1, [pc, #264]	; (8000894 <StartDefaultTask+0x120>)
 800078c:	4842      	ldr	r0, [pc, #264]	; (8000898 <StartDefaultTask+0x124>)
 800078e:	f002 f8cd 	bl	800292c <HAL_UART_Receive>
    if(strcmp(UARTinput,"1")==0)
 8000792:	4942      	ldr	r1, [pc, #264]	; (800089c <StartDefaultTask+0x128>)
 8000794:	483f      	ldr	r0, [pc, #252]	; (8000894 <StartDefaultTask+0x120>)
 8000796:	f7ff fd23 	bl	80001e0 <strcmp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11e      	bne.n	80007de <StartDefaultTask+0x6a>
    {
    	for(int i = 0; i<6; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e010      	b.n	80007c8 <StartDefaultTask+0x54>
    	{
    	osMessageQueuePut(scene1QueueHandle, scene1[i], 1, osWaitForever);
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <StartDefaultTask+0x12c>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4a3b      	ldr	r2, [pc, #236]	; (80008a4 <StartDefaultTask+0x130>)
 80007b6:	1899      	adds	r1, r3, r2
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	2201      	movs	r2, #1
 80007be:	f003 f881 	bl	80038c4 <osMessageQueuePut>
    	for(int i = 0; i<6; i++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	ddeb      	ble.n	80007a6 <StartDefaultTask+0x32>
    	}
		scene1Handle = osThreadNew(StartTask02, NULL, &scene1_attributes);
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <StartDefaultTask+0x134>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4836      	ldr	r0, [pc, #216]	; (80008ac <StartDefaultTask+0x138>)
 80007d4:	f002 fd6a 	bl	80032ac <osThreadNew>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <StartDefaultTask+0x13c>)
 80007dc:	6013      	str	r3, [r2, #0]
    }
    if(strcmp(UARTinput,"2")==0)
 80007de:	4935      	ldr	r1, [pc, #212]	; (80008b4 <StartDefaultTask+0x140>)
 80007e0:	482c      	ldr	r0, [pc, #176]	; (8000894 <StartDefaultTask+0x120>)
 80007e2:	f7ff fcfd 	bl	80001e0 <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d11e      	bne.n	800082a <StartDefaultTask+0xb6>
     {
    	for(int i = 0; i<7; i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	e010      	b.n	8000814 <StartDefaultTask+0xa0>
    	    	{
    	    	osMessageQueuePut(scene2QueueHandle, scene2[i], 1, osWaitForever);
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <StartDefaultTask+0x144>)
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <StartDefaultTask+0x148>)
 8000802:	1899      	adds	r1, r3, r2
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	2201      	movs	r2, #1
 800080a:	f003 f85b 	bl	80038c4 <osMessageQueuePut>
    	for(int i = 0; i<7; i++)
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3301      	adds	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	2b06      	cmp	r3, #6
 8000818:	ddeb      	ble.n	80007f2 <StartDefaultTask+0x7e>
    	    	}
    	scene2Handle = osThreadNew(StartTask03, NULL, &scene2_attributes);
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <StartDefaultTask+0x14c>)
 800081c:	2100      	movs	r1, #0
 800081e:	4829      	ldr	r0, [pc, #164]	; (80008c4 <StartDefaultTask+0x150>)
 8000820:	f002 fd44 	bl	80032ac <osThreadNew>
 8000824:	4603      	mov	r3, r0
 8000826:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <StartDefaultTask+0x154>)
 8000828:	6013      	str	r3, [r2, #0]
     }
    if(strcmp(UARTinput,"3")==0)
 800082a:	4928      	ldr	r1, [pc, #160]	; (80008cc <StartDefaultTask+0x158>)
 800082c:	4819      	ldr	r0, [pc, #100]	; (8000894 <StartDefaultTask+0x120>)
 800082e:	f7ff fcd7 	bl	80001e0 <strcmp>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11e      	bne.n	8000876 <StartDefaultTask+0x102>
     {
    	for(int i = 0; i<6; i++)
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e010      	b.n	8000860 <StartDefaultTask+0xec>
    	    	{
    	    	osMessageQueuePut(scene3QueueHandle, scene3[i], 1, osWaitForever);
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <StartDefaultTask+0x15c>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <StartDefaultTask+0x160>)
 800084e:	1899      	adds	r1, r3, r2
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2201      	movs	r2, #1
 8000856:	f003 f835 	bl	80038c4 <osMessageQueuePut>
    	for(int i = 0; i<6; i++)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b05      	cmp	r3, #5
 8000864:	ddeb      	ble.n	800083e <StartDefaultTask+0xca>
    	    	}
        scene3Handle = osThreadNew(StartTask04, NULL, &scene3_attributes);
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <StartDefaultTask+0x164>)
 8000868:	2100      	movs	r1, #0
 800086a:	481c      	ldr	r0, [pc, #112]	; (80008dc <StartDefaultTask+0x168>)
 800086c:	f002 fd1e 	bl	80032ac <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <StartDefaultTask+0x16c>)
 8000874:	6013      	str	r3, [r2, #0]
     }
    HAL_UART_Transmit(&huart2, (void *)UARTinput, strlen(UARTinput), 100);
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <StartDefaultTask+0x120>)
 8000878:	f7ff fcbc 	bl	80001f4 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	4904      	ldr	r1, [pc, #16]	; (8000894 <StartDefaultTask+0x120>)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <StartDefaultTask+0x124>)
 8000886:	f001 ffbd 	bl	8002804 <HAL_UART_Transmit>
    osDelay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f002 fe1e 	bl	80034cc <osDelay>
	memset(UARTinput, 0, 10);
 8000890:	e774      	b.n	800077c <StartDefaultTask+0x8>
 8000892:	bf00      	nop
 8000894:	200000ec 	.word	0x200000ec
 8000898:	20001dd0 	.word	0x20001dd0
 800089c:	08006cfc 	.word	0x08006cfc
 80008a0:	20001dc8 	.word	0x20001dc8
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08006d44 	.word	0x08006d44
 80008ac:	080008e5 	.word	0x080008e5
 80008b0:	20001db4 	.word	0x20001db4
 80008b4:	08006d00 	.word	0x08006d00
 80008b8:	20001db8 	.word	0x20001db8
 80008bc:	2000003c 	.word	0x2000003c
 80008c0:	08006d68 	.word	0x08006d68
 80008c4:	08000907 	.word	0x08000907
 80008c8:	20001dc0 	.word	0x20001dc0
 80008cc:	08006d04 	.word	0x08006d04
 80008d0:	20001da4 	.word	0x20001da4
 80008d4:	20000084 	.word	0x20000084
 80008d8:	08006d8c 	.word	0x08006d8c
 80008dc:	08000929 	.word	0x08000929
 80008e0:	20001dc4 	.word	0x20001dc4

080008e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	  executeScene(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fd23 	bl	8000338 <executeScene>
	  osThreadTerminate(osThreadGetId());
 80008f2:	f002 fd85 	bl	8003400 <osThreadGetId>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fda7 	bl	800344c <osThreadTerminate>
  /* USER CODE END StartTask02 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	  executeScene(2);
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff fd12 	bl	8000338 <executeScene>
	  osThreadTerminate(osThreadGetId());
 8000914:	f002 fd74 	bl	8003400 <osThreadGetId>
 8000918:	4603      	mov	r3, r0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fd96 	bl	800344c <osThreadTerminate>
  /* USER CODE END StartTask03 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	executeScene(3);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fd01 	bl	8000338 <executeScene>
	osThreadTerminate(osThreadGetId());
 8000936:	f002 fd63 	bl	8003400 <osThreadGetId>
 800093a:	4603      	mov	r3, r0
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fd85 	bl	800344c <osThreadTerminate>
  /* USER CODE END StartTask04 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094e:	b672      	cpsid	i
}
 8000950:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_MspInit+0x4c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_MspInit+0x4c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x4c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 f9cc 	bl	8000d2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d128      	bne.n	8000a18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f000 f9b4 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f88c 	bl	8000b74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5c:	f004 ff7a 	bl	8005954 <xTaskGetSchedulerState>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a66:	f005 fe2f 	bl	80066c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f006 f86b 	bl	8006b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fd3b 	bl	8000540 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000acc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000ad8:	08006e98 	.word	0x08006e98
  ldr r2, =_sbss
 8000adc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000ae0:	20001e9c 	.word	0x20001e9c

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f90d 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff26 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f917 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f8ed 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000c0 	.word	0x200000c0
 8000b6c:	200000c8 	.word	0x200000c8
 8000b70:	200000c4 	.word	0x200000c4

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200000c8 	.word	0x200000c8
 8000b98:	20001e58 	.word	0x20001e58

08000b9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20001e58 	.word	0x20001e58

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff47 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5c 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e160      	b.n	8001052 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8152 	beq.w	800104c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	6939      	ldr	r1, [r7, #16]
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0203 	and.w	r2, r3, #3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80ac 	beq.w	800104c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef4:	4b5e      	ldr	r3, [pc, #376]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a5d      	ldr	r2, [pc, #372]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b5b      	ldr	r3, [pc, #364]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f0c:	4a59      	ldr	r2, [pc, #356]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f36:	d025      	beq.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4f      	ldr	r2, [pc, #316]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d01f      	beq.n	8000f80 <HAL_GPIO_Init+0x200>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d019      	beq.n	8000f7c <HAL_GPIO_Init+0x1fc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4d      	ldr	r2, [pc, #308]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d013      	beq.n	8000f78 <HAL_GPIO_Init+0x1f8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1f4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4b      	ldr	r2, [pc, #300]	; (8001088 <HAL_GPIO_Init+0x308>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1f0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4a      	ldr	r2, [pc, #296]	; (800108c <HAL_GPIO_Init+0x30c>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f68:	2306      	movs	r3, #6
 8000f6a:	e00c      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	e00a      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f70:	2305      	movs	r3, #5
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x206>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc8:	4a31      	ldr	r2, [pc, #196]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fce:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_GPIO_Init+0x310>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_GPIO_Init+0x310>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_GPIO_Init+0x310>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f ae97 	bne.w	8000d90 <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	48001400 	.word	0x48001400
 800108c:	48001800 	.word	0x48001800
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800109a:	af00      	add	r7, sp, #0
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f000 bf01 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8160 	beq.w	800137e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010be:	4bae      	ldr	r3, [pc, #696]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ca:	4bab      	ldr	r3, [pc, #684]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d159      	bne.n	800118a <HAL_RCC_OscConfig+0xf6>
 80010d6:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e2:	d152      	bne.n	800118a <HAL_RCC_OscConfig+0xf6>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d102      	bne.n	8001116 <HAL_RCC_OscConfig+0x82>
 8001110:	4b99      	ldr	r3, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0xae>
 8001116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800112a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001132:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800113e:	4b8e      	ldr	r3, [pc, #568]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001146:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800114a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800114e:	fa92 f2a2 	rbit	r2, r2
 8001152:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001156:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	f002 021f 	and.w	r2, r2, #31
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8102 	beq.w	800137c <HAL_RCC_OscConfig+0x2e8>
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 80fc 	bne.w	800137c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	f000 be93 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d106      	bne.n	80011a4 <HAL_RCC_OscConfig+0x110>
 8001196:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e030      	b.n	8001206 <HAL_RCC_OscConfig+0x172>
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x134>
 80011ae:	4b72      	ldr	r3, [pc, #456]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a71      	ldr	r2, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b6f      	ldr	r3, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6e      	ldr	r2, [pc, #440]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e01e      	b.n	8001206 <HAL_RCC_OscConfig+0x172>
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x15a>
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a67      	ldr	r2, [pc, #412]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b65      	ldr	r3, [pc, #404]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a64      	ldr	r2, [pc, #400]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x172>
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a61      	ldr	r2, [pc, #388]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a5e      	ldr	r2, [pc, #376]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d059      	beq.n	80012c4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcc4 	bl	8000b9c <HAL_GetTick>
 8001214:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121a:	f7ff fcbf 	bl	8000b9c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d902      	bls.n	8001230 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	f000 be40 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001234:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001244:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d102      	bne.n	8001262 <HAL_RCC_OscConfig+0x1ce>
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x1fa>
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800127e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001292:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001296:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800129a:	fa92 f2a2 	rbit	r2, r2
 800129e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012a6:	fab2 f282 	clz	r2, r2
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f042 0220 	orr.w	r2, r2, #32
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	f002 021f 	and.w	r2, r2, #31
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0ab      	beq.n	800121a <HAL_RCC_OscConfig+0x186>
 80012c2:	e05c      	b.n	800137e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc6a 	bl	8000b9c <HAL_GetTick>
 80012c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ce:	f7ff fc65 	bl	8000b9c <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d902      	bls.n	80012e4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	f000 bde6 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 80012e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d102      	bne.n	8001316 <HAL_RCC_OscConfig+0x282>
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x2ae>
 8001316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800132a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001332:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_RCC_OscConfig+0x2e4>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001346:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800134a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001356:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800135a:	fab2 f282 	clz	r2, r2
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	f002 021f 	and.w	r2, r2, #31
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ab      	bne.n	80012ce <HAL_RCC_OscConfig+0x23a>
 8001376:	e002      	b.n	800137e <HAL_RCC_OscConfig+0x2ea>
 8001378:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8170 	beq.w	800166e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800138e:	4bd0      	ldr	r3, [pc, #832]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800139a:	4bcd      	ldr	r3, [pc, #820]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d16d      	bne.n	8001482 <HAL_RCC_OscConfig+0x3ee>
 80013a6:	4bca      	ldr	r3, [pc, #808]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013b2:	d166      	bne.n	8001482 <HAL_RCC_OscConfig+0x3ee>
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x350>
 80013de:	4bbc      	ldr	r3, [pc, #752]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	e013      	b.n	800140c <HAL_RCC_OscConfig+0x378>
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001408:	4bb1      	ldr	r3, [pc, #708]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2202      	movs	r2, #2
 800140e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001412:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800141e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_RCC_OscConfig+0x3ba>
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f000 bd31 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4ba0      	ldr	r3, [pc, #640]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	21f8      	movs	r1, #248	; 0xf8
 800145e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001466:	fa91 f1a1 	rbit	r1, r1
 800146a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800146e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001472:	fab1 f181 	clz	r1, r1
 8001476:	b2c9      	uxtb	r1, r1
 8001478:	408b      	lsls	r3, r1
 800147a:	4995      	ldr	r1, [pc, #596]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001480:	e0f5      	b.n	800166e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8085 	beq.w	8001598 <HAL_RCC_OscConfig+0x504>
 800148e:	2301      	movs	r3, #1
 8001490:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	461a      	mov	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb6f 	bl	8000b9c <HAL_GetTick>
 80014be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fb6a 	bl	8000b9c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d902      	bls.n	80014da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f000 bceb 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x476>
 8001504:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e013      	b.n	8001532 <HAL_RCC_OscConfig+0x49e>
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001522:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2202      	movs	r2, #2
 8001534:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001538:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800153c:	fa92 f2a2 	rbit	r2, r2
 8001540:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001544:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	f002 021f 	and.w	r2, r2, #31
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0af      	beq.n	80014c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	21f8      	movs	r1, #248	; 0xf8
 8001574:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800157c:	fa91 f1a1 	rbit	r1, r1
 8001580:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001584:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001588:	fab1 f181 	clz	r1, r1
 800158c:	b2c9      	uxtb	r1, r1
 800158e:	408b      	lsls	r3, r1
 8001590:	494f      	ldr	r1, [pc, #316]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
 8001596:	e06a      	b.n	800166e <HAL_RCC_OscConfig+0x5da>
 8001598:	2301      	movs	r3, #1
 800159a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	2300      	movs	r3, #0
 80015c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff faea 	bl	8000b9c <HAL_GetTick>
 80015c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fae5 	bl	8000b9c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d902      	bls.n	80015e4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	f000 bc66 	b.w	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d102      	bne.n	8001614 <HAL_RCC_OscConfig+0x580>
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	e013      	b.n	800163c <HAL_RCC_OscConfig+0x5a8>
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800162c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_RCC_OscConfig+0x63c>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2202      	movs	r2, #2
 800163e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001642:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001646:	fa92 f2a2 	rbit	r2, r2
 800164a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800164e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001652:	fab2 f282 	clz	r2, r2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f002 021f 	and.w	r2, r2, #31
 8001662:	2101      	movs	r1, #1
 8001664:	fa01 f202 	lsl.w	r2, r1, r2
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1af      	bne.n	80015ce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80da 	beq.w	8001832 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d069      	beq.n	800175c <HAL_RCC_OscConfig+0x6c8>
 8001688:	2301      	movs	r3, #1
 800168a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800169a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x640>)
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	461a      	mov	r2, r3
 80016ae:	2301      	movs	r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa73 	bl	8000b9c <HAL_GetTick>
 80016b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e00d      	b.n	80016d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fa6e 	bl	8000b9c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d905      	bls.n	80016d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e3ef      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	10908120 	.word	0x10908120
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800171a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171c:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800171e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001720:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001724:	2102      	movs	r1, #2
 8001726:	6019      	str	r1, [r3, #0]
 8001728:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f1a3 	rbit	r1, r3
 8001732:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001736:	6019      	str	r1, [r3, #0]
  return result;
 8001738:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0b0      	beq.n	80016bc <HAL_RCC_OscConfig+0x628>
 800175a:	e06a      	b.n	8001832 <HAL_RCC_OscConfig+0x79e>
 800175c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	fa93 f2a3 	rbit	r2, r3
 800176e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001772:	601a      	str	r2, [r3, #0]
  return result;
 8001774:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001778:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <HAL_RCC_OscConfig+0x920>)
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	461a      	mov	r2, r3
 800178a:	2300      	movs	r3, #0
 800178c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fa05 	bl	8000b9c <HAL_GetTick>
 8001792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e009      	b.n	80017ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fa00 	bl	8000b9c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e381      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 80017ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e0:	2202      	movs	r2, #2
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fa93 f2a3 	rbit	r2, r3
 80017ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80017f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fc:	2102      	movs	r1, #2
 80017fe:	6019      	str	r1, [r3, #0]
 8001800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fa93 f1a3 	rbit	r1, r3
 800180a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800180e:	6019      	str	r1, [r3, #0]
  return result;
 8001810:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1b2      	bne.n	8001798 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8157 	beq.w	8001af0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185e:	61d3      	str	r3, [r2, #28]
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001874:	2301      	movs	r3, #1
 8001876:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_RCC_OscConfig+0x924>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11a      	bne.n	80018bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_OscConfig+0x924>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_RCC_OscConfig+0x924>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff f983 	bl	8000b9c <HAL_GetTick>
 8001896:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	e009      	b.n	80018b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189c:	f7ff f97e 	bl	8000b9c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2ff      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCC_OscConfig+0x924>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x840>
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a39      	ldr	r2, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	e02f      	b.n	8001934 <HAL_RCC_OscConfig+0x8a0>
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x864>
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a30      	ldr	r2, [pc, #192]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0x8a0>
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x888>
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x8a0>
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06a      	beq.n	8001a14 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff f92d 	bl	8000b9c <HAL_GetTick>
 8001942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f928 	bl	8000b9c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2a7      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001960:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001964:	2202      	movs	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001994:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d108      	bne.n	80019bc <HAL_RCC_OscConfig+0x928>
 80019aa:	4b01      	ldr	r3, [pc, #4]	; (80019b0 <HAL_RCC_OscConfig+0x91c>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_OscConfig+0x944>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	10908120 	.word	0x10908120
 80019b8:	40007000 	.word	0x40007000
 80019bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4bc0      	ldr	r3, [pc, #768]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019dc:	2102      	movs	r1, #2
 80019de:	6011      	str	r1, [r2, #0]
 80019e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fa92 f1a2 	rbit	r1, r2
 80019ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019ee:	6011      	str	r1, [r2, #0]
  return result;
 80019f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	fab2 f282 	clz	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d09a      	beq.n	8001948 <HAL_RCC_OscConfig+0x8b4>
 8001a12:	e063      	b.n	8001adc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f8c2 	bl	8000b9c <HAL_GetTick>
 8001a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f8bd 	bl	8000b9c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e23c      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001a36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a64:	601a      	str	r2, [r3, #0]
  return result;
 8001a66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x9f2>
 8001a80:	4b95      	ldr	r3, [pc, #596]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	e00d      	b.n	8001aa2 <HAL_RCC_OscConfig+0xa0e>
 8001a86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fa92 f1a2 	rbit	r1, r2
 8001ab4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ab8:	6011      	str	r1, [r2, #0]
  return result;
 8001aba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f002 021f 	and.w	r2, r2, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1a0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001adc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	4a7b      	ldr	r2, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 81d9 	beq.w	8001eae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	f000 81a6 	beq.w	8001e56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	f040 811e 	bne.w	8001d52 <HAL_RCC_OscConfig+0xcbe>
 8001b16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	fa93 f2a3 	rbit	r2, r3
 8001b2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b2e:	601a      	str	r2, [r3, #0]
  return result;
 8001b30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f826 	bl	8000b9c <HAL_GetTick>
 8001b50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f821 	bl	8000b9c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1a2      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001b6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b82:	601a      	str	r2, [r3, #0]
  return result;
 8001b84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xb10>
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e01b      	b.n	8001bdc <HAL_RCC_OscConfig+0xb48>
 8001ba4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be4:	6011      	str	r1, [r2, #0]
 8001be6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fa92 f1a2 	rbit	r1, r2
 8001bf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bf4:	6011      	str	r1, [r2, #0]
  return result;
 8001bf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d19e      	bne.n	8001b56 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f023 020f 	bic.w	r2, r3, #15
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	492c      	ldr	r1, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a19      	ldr	r1, [r3, #32]
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	4925      	ldr	r1, [pc, #148]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
 8001c48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c60:	601a      	str	r2, [r3, #0]
  return result;
 8001c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe ff8d 	bl	8000b9c <HAL_GetTick>
 8001c82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c86:	e009      	b.n	8001c9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe ff88 	bl	8000b9c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e109      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001c9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cb4:	601a      	str	r2, [r3, #0]
  return result;
 8001cb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0xc48>
 8001cd0:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_RCC_OscConfig+0xc44>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e01e      	b.n	8001d14 <HAL_RCC_OscConfig+0xc80>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0xe28>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d2c:	6011      	str	r1, [r2, #0]
  return result;
 8001d2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d09b      	beq.n	8001c88 <HAL_RCC_OscConfig+0xbf4>
 8001d50:	e0ad      	b.n	8001eae <HAL_RCC_OscConfig+0xe1a>
 8001d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff08 	bl	8000b9c <HAL_GetTick>
 8001d8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff03 	bl	8000b9c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e084      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0xd4c>
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_RCC_OscConfig+0xe28>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e01b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd84>
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f107 0318 	add.w	r3, r7, #24
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_OscConfig+0xe28>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f107 0214 	add.w	r2, r7, #20
 8001e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e20:	6011      	str	r1, [r2, #0]
 8001e22:	f107 0214 	add.w	r2, r7, #20
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fa92 f1a2 	rbit	r1, r2
 8001e2c:	f107 0210 	add.w	r2, r7, #16
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f107 0210 	add.w	r2, r7, #16
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d19e      	bne.n	8001d92 <HAL_RCC_OscConfig+0xcfe>
 8001e54:	e02b      	b.n	8001eae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_RCC_OscConfig+0xe28>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_RCC_OscConfig+0xe28>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d111      	bne.n	8001eaa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d108      	bne.n	8001eaa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e9c:	f003 020f 	and.w	r2, r3, #15
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09e      	sub	sp, #120	; 0x78
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e162      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	498b      	ldr	r1, [pc, #556]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b89      	ldr	r3, [pc, #548]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e14a      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	497f      	ldr	r1, [pc, #508]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80dc 	beq.w	80020ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d13c      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xf6>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xa6>
 8001f60:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e00f      	b.n	8001f86 <HAL_RCC_ClockConfig+0xc6>
 8001f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	667b      	str	r3, [r7, #100]	; 0x64
 8001f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
 8001f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17b      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0f3      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d13c      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x128>
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_ClockConfig+0x148>
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8001ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200c:	63ba      	str	r2, [r7, #56]	; 0x38
 800200e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002010:	fa92 f2a2 	rbit	r2, r2
 8002014:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d13a      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b2      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 8002038:	2302      	movs	r3, #2
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00d      	b.n	800207c <HAL_RCC_ClockConfig+0x1bc>
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	61ba      	str	r2, [r7, #24]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	617a      	str	r2, [r7, #20]
  return result;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e079      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	491a      	ldr	r1, [pc, #104]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fd6e 	bl	8000b9c <HAL_GetTick>
 80020c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe fd6a 	bl	8000b9c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e061      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d214      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4906      	ldr	r1, [pc, #24]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_RCC_ClockConfig+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e040      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4912      	ldr	r1, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002162:	f000 f829 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	60fa      	str	r2, [r7, #12]
  return result;
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	40d3      	lsrs	r3, r2
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x2ec>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fcbc 	bl	8000b14 <HAL_InitTick>
  
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3778      	adds	r7, #120	; 0x78
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08006e58 	.word	0x08006e58
 80021b0:	200000c0 	.word	0x200000c0
 80021b4:	200000c4 	.word	0x200000c4

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b08b      	sub	sp, #44	; 0x2c
 80021bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x30>
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x36>
 80021e6:	e03f      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ea:	623b      	str	r3, [r7, #32]
      break;
 80021ec:	e03f      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa92 f2a2 	rbit	r2, r2
 8002200:	607a      	str	r2, [r7, #4]
  return result;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	40d3      	lsrs	r3, r2
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_RCC_GetSysClockFreq+0xcc>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	220f      	movs	r2, #15
 800221c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	60fa      	str	r2, [r7, #12]
  return result;
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	fab2 f282 	clz	r2, r2
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	40d3      	lsrs	r3, r2
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	fbb2 f2f3 	udiv	r2, r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
 8002250:	e007      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fbb2 f2f3 	udiv	r2, r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	623b      	str	r3, [r7, #32]
      break;
 8002266:	e002      	b.n	800226e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetSysClockFreq+0xc8>)
 800226a:	623b      	str	r3, [r7, #32]
      break;
 800226c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226e:	6a3b      	ldr	r3, [r7, #32]
}
 8002270:	4618      	mov	r0, r3
 8002272:	372c      	adds	r7, #44	; 0x2c
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	08006e70 	.word	0x08006e70
 8002288:	08006e80 	.word	0x08006e80

0800228c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200000c0 	.word	0x200000c0

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022aa:	f7ff ffef 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022ae:	4601      	mov	r1, r0
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	603a      	str	r2, [r7, #0]
  return result;
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08006e68 	.word	0x08006e68

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022ee:	f7ff ffcd 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022f2:	4601      	mov	r1, r0
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002300:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	603a      	str	r2, [r7, #0]
  return result;
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	40d3      	lsrs	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	08006e68 	.word	0x08006e68

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b092      	sub	sp, #72	; 0x48
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80d4 	beq.w	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10e      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	61d3      	str	r3, [r2, #28]
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b45      	ldr	r3, [pc, #276]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d118      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a41      	ldr	r2, [pc, #260]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe fc03 	bl	8000b9c <HAL_GetTick>
 8002396:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	e008      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fbff 	bl	8000b9c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1d6      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8084 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d07c      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d04b      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fbaf 	bl	8000b9c <HAL_GetTick>
 800243e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fbab 	bl	8000b9c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e180      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002458:	2302      	movs	r3, #2
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	61fb      	str	r3, [r7, #28]
  return result;
 8002470:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d108      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002486:	4b01      	ldr	r3, [pc, #4]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	e00d      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	10908100 	.word	0x10908100
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2202      	movs	r2, #2
 80024aa:	613a      	str	r2, [r7, #16]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	60fa      	str	r2, [r7, #12]
  return result;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0b7      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024d2:	4b95      	ldr	r3, [pc, #596]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4992      	ldr	r1, [pc, #584]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4a8d      	ldr	r2, [pc, #564]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002504:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f023 0203 	bic.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4985      	ldr	r1, [pc, #532]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002522:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	497e      	ldr	r1, [pc, #504]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002540:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	4976      	ldr	r1, [pc, #472]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f023 0210 	bic.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	496f      	ldr	r1, [pc, #444]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	4967      	ldr	r1, [pc, #412]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 0220 	bic.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4960      	ldr	r1, [pc, #384]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	4958      	ldr	r1, [pc, #352]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4951      	ldr	r1, [pc, #324]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4949      	ldr	r1, [pc, #292]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4942      	ldr	r1, [pc, #264]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	493a      	ldr	r1, [pc, #232]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	4933      	ldr	r1, [pc, #204]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	492b      	ldr	r1, [pc, #172]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4924      	ldr	r1, [pc, #144]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	491c      	ldr	r1, [pc, #112]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	4915      	ldr	r1, [pc, #84]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	490d      	ldr	r1, [pc, #52]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270e:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	e002      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	490b      	ldr	r1, [pc, #44]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	4904      	ldr	r1, [pc, #16]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3748      	adds	r7, #72	; 0x48
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e040      	b.n	80027fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe f90a 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f992 	bl	8002ad0 <UART_SetConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e022      	b.n	80027fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fb5c 	bl	8002e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fbe3 	bl	8002fc0 <UART_CheckIdleState>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 8082 	bne.w	8002922 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_Transmit+0x26>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07a      	b.n	8002924 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit+0x38>
 8002838:	2302      	movs	r3, #2
 800283a:	e073      	b.n	8002924 <HAL_UART_Transmit+0x120>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2221      	movs	r2, #33	; 0x21
 8002850:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002852:	f7fe f9a3 	bl	8000b9c <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d108      	bne.n	8002884 <HAL_UART_Transmit+0x80>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e003      	b.n	800288c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002894:	e02d      	b.n	80028f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fbd6 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e039      	b.n	8002924 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c2:	b292      	uxth	r2, r2
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3302      	adds	r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e008      	b.n	80028e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b292      	uxth	r2, r2
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1cb      	bne.n	8002896 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2200      	movs	r2, #0
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fba2 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e005      	b.n	8002924 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002940:	2b20      	cmp	r3, #32
 8002942:	f040 80bf 	bne.w	8002ac4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_Receive+0x26>
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0b7      	b.n	8002ac6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_UART_Receive+0x38>
 8002960:	2302      	movs	r3, #2
 8002962:	e0b0      	b.n	8002ac6 <HAL_UART_Receive+0x19a>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2222      	movs	r2, #34	; 0x22
 8002978:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002980:	f7fe f90c 	bl	8000b9c <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d10e      	bne.n	80029be <HAL_UART_Receive+0x92>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_UART_Receive+0x88>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029b2:	e02d      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029bc:	e028      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_UART_Receive+0xb6>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_UART_Receive+0xac>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029d6:	e01b      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	227f      	movs	r2, #127	; 0x7f
 80029dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029e0:	e016      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ea:	d10d      	bne.n	8002a08 <HAL_UART_Receive+0xdc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_UART_Receive+0xd2>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	227f      	movs	r2, #127	; 0x7f
 80029f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029fc:	e008      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	223f      	movs	r2, #63	; 0x3f
 8002a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a06:	e003      	b.n	8002a10 <HAL_UART_Receive+0xe4>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d108      	bne.n	8002a34 <HAL_UART_Receive+0x108>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e003      	b.n	8002a3c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a44:	e033      	b.n	8002aae <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2120      	movs	r1, #32
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fafe 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e032      	b.n	8002ac6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	8a7b      	ldrh	r3, [r7, #18]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e00d      	b.n	8002a9c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1c5      	bne.n	8002a46 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4bab      	ldr	r3, [pc, #684]	; (8002da8 <UART_SetConfig+0x2d8>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a99      	ldr	r2, [pc, #612]	; (8002dac <UART_SetConfig+0x2dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d120      	bne.n	8002b8e <UART_SetConfig+0xbe>
 8002b4c:	4b98      	ldr	r3, [pc, #608]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d817      	bhi.n	8002b88 <UART_SetConfig+0xb8>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <UART_SetConfig+0x90>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b7d 	.word	0x08002b7d
 8002b68:	08002b83 	.word	0x08002b83
 8002b6c:	08002b77 	.word	0x08002b77
 8002b70:	2301      	movs	r3, #1
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e0b5      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002b76:	2302      	movs	r3, #2
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e0b2      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e0af      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002b82:	2308      	movs	r3, #8
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e0ac      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	77fb      	strb	r3, [r7, #31]
 8002b8c:	e0a9      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a88      	ldr	r2, [pc, #544]	; (8002db4 <UART_SetConfig+0x2e4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d124      	bne.n	8002be2 <UART_SetConfig+0x112>
 8002b98:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ba4:	d011      	beq.n	8002bca <UART_SetConfig+0xfa>
 8002ba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002baa:	d817      	bhi.n	8002bdc <UART_SetConfig+0x10c>
 8002bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb0:	d011      	beq.n	8002bd6 <UART_SetConfig+0x106>
 8002bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb6:	d811      	bhi.n	8002bdc <UART_SetConfig+0x10c>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <UART_SetConfig+0xf4>
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d006      	beq.n	8002bd0 <UART_SetConfig+0x100>
 8002bc2:	e00b      	b.n	8002bdc <UART_SetConfig+0x10c>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e08b      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e088      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e085      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e082      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e07f      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a74      	ldr	r2, [pc, #464]	; (8002db8 <UART_SetConfig+0x2e8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d124      	bne.n	8002c36 <UART_SetConfig+0x166>
 8002bec:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002bf4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bf8:	d011      	beq.n	8002c1e <UART_SetConfig+0x14e>
 8002bfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bfe:	d817      	bhi.n	8002c30 <UART_SetConfig+0x160>
 8002c00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c04:	d011      	beq.n	8002c2a <UART_SetConfig+0x15a>
 8002c06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c0a:	d811      	bhi.n	8002c30 <UART_SetConfig+0x160>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <UART_SetConfig+0x148>
 8002c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c14:	d006      	beq.n	8002c24 <UART_SetConfig+0x154>
 8002c16:	e00b      	b.n	8002c30 <UART_SetConfig+0x160>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e061      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e05e      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c24:	2304      	movs	r3, #4
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e05b      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e058      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c30:	2310      	movs	r3, #16
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	e055      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <UART_SetConfig+0x2ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d124      	bne.n	8002c8a <UART_SetConfig+0x1ba>
 8002c40:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c4c:	d011      	beq.n	8002c72 <UART_SetConfig+0x1a2>
 8002c4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c52:	d817      	bhi.n	8002c84 <UART_SetConfig+0x1b4>
 8002c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c58:	d011      	beq.n	8002c7e <UART_SetConfig+0x1ae>
 8002c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5e:	d811      	bhi.n	8002c84 <UART_SetConfig+0x1b4>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <UART_SetConfig+0x19c>
 8002c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c68:	d006      	beq.n	8002c78 <UART_SetConfig+0x1a8>
 8002c6a:	e00b      	b.n	8002c84 <UART_SetConfig+0x1b4>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e037      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c72:	2302      	movs	r3, #2
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e034      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e031      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e02e      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c84:	2310      	movs	r3, #16
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e02b      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4c      	ldr	r2, [pc, #304]	; (8002dc0 <UART_SetConfig+0x2f0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d124      	bne.n	8002cde <UART_SetConfig+0x20e>
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <UART_SetConfig+0x2e0>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca0:	d011      	beq.n	8002cc6 <UART_SetConfig+0x1f6>
 8002ca2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca6:	d817      	bhi.n	8002cd8 <UART_SetConfig+0x208>
 8002ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cac:	d011      	beq.n	8002cd2 <UART_SetConfig+0x202>
 8002cae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb2:	d811      	bhi.n	8002cd8 <UART_SetConfig+0x208>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <UART_SetConfig+0x1f0>
 8002cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbc:	d006      	beq.n	8002ccc <UART_SetConfig+0x1fc>
 8002cbe:	e00b      	b.n	8002cd8 <UART_SetConfig+0x208>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e00d      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e00a      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e007      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e004      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002cd8:	2310      	movs	r3, #16
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e001      	b.n	8002ce2 <UART_SetConfig+0x212>
 8002cde:	2310      	movs	r3, #16
 8002ce0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d16d      	bne.n	8002dc8 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d827      	bhi.n	8002d42 <UART_SetConfig+0x272>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <UART_SetConfig+0x228>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d2d 	.word	0x08002d2d
 8002d04:	08002d43 	.word	0x08002d43
 8002d08:	08002d33 	.word	0x08002d33
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d43 	.word	0x08002d43
 8002d18:	08002d3b 	.word	0x08002d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff fac2 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8002d20:	61b8      	str	r0, [r7, #24]
        break;
 8002d22:	e013      	b.n	8002d4c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d24:	f7ff fae0 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002d28:	61b8      	str	r0, [r7, #24]
        break;
 8002d2a:	e00f      	b.n	8002d4c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <UART_SetConfig+0x2f4>)
 8002d2e:	61bb      	str	r3, [r7, #24]
        break;
 8002d30:	e00c      	b.n	8002d4c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7ff fa41 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002d36:	61b8      	str	r0, [r7, #24]
        break;
 8002d38:	e008      	b.n	8002d4c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e004      	b.n	8002d4c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	77bb      	strb	r3, [r7, #30]
        break;
 8002d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8086 	beq.w	8002e60 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	005a      	lsls	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	d916      	bls.n	8002da0 <UART_SetConfig+0x2d0>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d212      	bcs.n	8002da0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f023 030f 	bic.w	r3, r3, #15
 8002d82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	89fa      	ldrh	r2, [r7, #14]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e05f      	b.n	8002e60 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77bb      	strb	r3, [r7, #30]
 8002da4:	e05c      	b.n	8002e60 <UART_SetConfig+0x390>
 8002da6:	bf00      	nop
 8002da8:	efff69f3 	.word	0xefff69f3
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	40004c00 	.word	0x40004c00
 8002dc0:	40005000 	.word	0x40005000
 8002dc4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d827      	bhi.n	8002e1e <UART_SetConfig+0x34e>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0x304>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e1f 	.word	0x08002e1f
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e1f 	.word	0x08002e1f
 8002dec:	08002e1f 	.word	0x08002e1f
 8002df0:	08002e1f 	.word	0x08002e1f
 8002df4:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7ff fa54 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	61b8      	str	r0, [r7, #24]
        break;
 8002dfe:	e013      	b.n	8002e28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff fa72 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8002e04:	61b8      	str	r0, [r7, #24]
        break;
 8002e06:	e00f      	b.n	8002e28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <UART_SetConfig+0x3a8>)
 8002e0a:	61bb      	str	r3, [r7, #24]
        break;
 8002e0c:	e00c      	b.n	8002e28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff f9d3 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002e12:	61b8      	str	r0, [r7, #24]
        break;
 8002e14:	e008      	b.n	8002e28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	61bb      	str	r3, [r7, #24]
        break;
 8002e1c:	e004      	b.n	8002e28 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	77bb      	strb	r3, [r7, #30]
        break;
 8002e26:	bf00      	nop
    }

    if (pclk != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	085a      	lsrs	r2, r3, #1
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	d908      	bls.n	8002e5c <UART_SetConfig+0x38c>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d204      	bcs.n	8002e5c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	e001      	b.n	8002e60 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01a      	beq.n	8002f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7a:	d10a      	bne.n	8002f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd0:	f7fd fde4 	bl	8000b9c <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d10e      	bne.n	8003002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f82d 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e023      	b.n	800304a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d10e      	bne.n	800302e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f817 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e00d      	b.n	800304a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b09c      	sub	sp, #112	; 0x70
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	e0a5      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	f000 80a1 	beq.w	80031b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fd95 	bl	8000b9c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <UART_WaitOnFlagUntilTimeout+0x32>
 800307e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13e      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003098:	667b      	str	r3, [r7, #100]	; 0x64
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e6      	bne.n	8003084 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3308      	adds	r3, #8
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	663b      	str	r3, [r7, #96]	; 0x60
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3308      	adds	r3, #8
 80030d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80030d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e067      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d04f      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311e:	d147      	bne.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800313e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
 800314a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e6      	bne.n	800312a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3308      	adds	r3, #8
 8003162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	613b      	str	r3, [r7, #16]
   return(result);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	66bb      	str	r3, [r7, #104]	; 0x68
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800317c:	623a      	str	r2, [r7, #32]
 800317e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	69f9      	ldr	r1, [r7, #28]
 8003182:	6a3a      	ldr	r2, [r7, #32]
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	61bb      	str	r3, [r7, #24]
   return(result);
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e010      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f43f af4a 	beq.w	8003064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3770      	adds	r7, #112	; 0x70
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e2:	f3ef 8305 	mrs	r3, IPSR
 80031e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ee:	f3ef 8310 	mrs	r3, PRIMASK
 80031f2:	607b      	str	r3, [r7, #4]
  return(result);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <osKernelInitialize+0x32>
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <osKernelInitialize+0x64>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d109      	bne.n	8003216 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003202:	f3ef 8311 	mrs	r3, BASEPRI
 8003206:	603b      	str	r3, [r7, #0]
  return(result);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800320e:	f06f 0305 	mvn.w	r3, #5
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e00c      	b.n	8003230 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <osKernelInitialize+0x64>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <osKernelInitialize+0x64>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e002      	b.n	8003230 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	200000f8 	.word	0x200000f8

08003244 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800324a:	f3ef 8305 	mrs	r3, IPSR
 800324e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003250:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003256:	f3ef 8310 	mrs	r3, PRIMASK
 800325a:	607b      	str	r3, [r7, #4]
  return(result);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <osKernelStart+0x32>
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <osKernelStart+0x64>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d109      	bne.n	800327e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800326a:	f3ef 8311 	mrs	r3, BASEPRI
 800326e:	603b      	str	r3, [r7, #0]
  return(result);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003276:	f06f 0305 	mvn.w	r3, #5
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e00e      	b.n	800329c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <osKernelStart+0x64>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <osKernelStart+0x64>)
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800328c:	f001 ff00 	bl	8005090 <vTaskStartScheduler>
      stat = osOK;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e002      	b.n	800329c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800329c:	68fb      	ldr	r3, [r7, #12]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200000f8 	.word	0x200000f8

080032ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b092      	sub	sp, #72	; 0x48
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032bc:	f3ef 8305 	mrs	r3, IPSR
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 8094 	bne.w	80033f2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	623b      	str	r3, [r7, #32]
  return(result);
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 808d 	bne.w	80033f2 <osThreadNew+0x146>
 80032d8:	4b48      	ldr	r3, [pc, #288]	; (80033fc <osThreadNew+0x150>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d106      	bne.n	80032ee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032e0:	f3ef 8311 	mrs	r3, BASEPRI
 80032e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8082 	bne.w	80033f2 <osThreadNew+0x146>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d07e      	beq.n	80033f2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032f8:	2318      	movs	r3, #24
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032fc:	2300      	movs	r3, #0
 80032fe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003300:	f107 031b 	add.w	r3, r7, #27
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d045      	beq.n	800339e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <osThreadNew+0x74>
        name = attr->name;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <osThreadNew+0x9a>
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	2b38      	cmp	r3, #56	; 0x38
 8003338:	d805      	bhi.n	8003346 <osThreadNew+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <osThreadNew+0x9e>
        return (NULL);
 8003346:	2300      	movs	r3, #0
 8003348:	e054      	b.n	80033f4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <osThreadNew+0xd4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b5b      	cmp	r3, #91	; 0x5b
 8003368:	d90a      	bls.n	8003380 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <osThreadNew+0xd4>
        mem = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	e010      	b.n	80033a2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10c      	bne.n	80033a2 <osThreadNew+0xf6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d108      	bne.n	80033a2 <osThreadNew+0xf6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <osThreadNew+0xf6>
          mem = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
 800339c:	e001      	b.n	80033a2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d110      	bne.n	80033ca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033b0:	9202      	str	r2, [sp, #8]
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f001 fbce 	bl	8004b60 <xTaskCreateStatic>
 80033c4:	4603      	mov	r3, r0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e013      	b.n	80033f2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d110      	bne.n	80033f2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f001 fc18 	bl	8004c18 <xTaskCreate>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <osThreadNew+0x146>
          hTask = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033f2:	697b      	ldr	r3, [r7, #20]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3738      	adds	r7, #56	; 0x38
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000f8 	.word	0x200000f8

08003400 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003406:	f3ef 8305 	mrs	r3, IPSR
 800340a:	60bb      	str	r3, [r7, #8]
  return(result);
 800340c:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	607b      	str	r3, [r7, #4]
  return(result);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <osThreadGetId+0x32>
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <osThreadGetId+0x48>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d108      	bne.n	8003438 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003426:	f3ef 8311 	mrs	r3, BASEPRI
 800342a:	603b      	str	r3, [r7, #0]
  return(result);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <osThreadGetId+0x38>
    id = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e002      	b.n	800343e <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8003438:	f002 fa7c 	bl	8005934 <xTaskGetCurrentTaskHandle>
 800343c:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000f8 	.word	0x200000f8

0800344c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003458:	f3ef 8305 	mrs	r3, IPSR
 800345c:	613b      	str	r3, [r7, #16]
  return(result);
 800345e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	60fb      	str	r3, [r7, #12]
  return(result);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <osThreadTerminate+0x38>
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <osThreadTerminate+0x7c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d109      	bne.n	800348c <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003478:	f3ef 8311 	mrs	r3, BASEPRI
 800347c:	60bb      	str	r3, [r7, #8]
  return(result);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <osThreadTerminate+0x40>
    stat = osErrorISR;
 8003484:	f06f 0305 	mvn.w	r3, #5
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e017      	b.n	80034bc <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8003492:	f06f 0303 	mvn.w	r3, #3
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e010      	b.n	80034bc <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800349a:	69b8      	ldr	r0, [r7, #24]
 800349c:	f001 fd9e 	bl	8004fdc <eTaskGetState>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d005      	beq.n	80034b6 <osThreadTerminate+0x6a>
      stat = osOK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 80034ae:	69b8      	ldr	r0, [r7, #24]
 80034b0:	f001 fcee 	bl	8004e90 <vTaskDelete>
 80034b4:	e002      	b.n	80034bc <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 80034b6:	f06f 0302 	mvn.w	r3, #2
 80034ba:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 80034bc:	69fb      	ldr	r3, [r7, #28]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200000f8 	.word	0x200000f8

080034cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d4:	f3ef 8305 	mrs	r3, IPSR
 80034d8:	613b      	str	r3, [r7, #16]
  return(result);
 80034da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e0:	f3ef 8310 	mrs	r3, PRIMASK
 80034e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <osDelay+0x34>
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <osDelay+0x58>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d109      	bne.n	8003508 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034f4:	f3ef 8311 	mrs	r3, BASEPRI
 80034f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <osDelay+0x3c>
    stat = osErrorISR;
 8003500:	f06f 0305 	mvn.w	r3, #5
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e007      	b.n	8003518 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f001 fd2e 	bl	8004f74 <vTaskDelay>
    }
  }

  return (stat);
 8003518:	697b      	ldr	r3, [r7, #20]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200000f8 	.word	0x200000f8

08003528 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003534:	f3ef 8305 	mrs	r3, IPSR
 8003538:	613b      	str	r3, [r7, #16]
  return(result);
 800353a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 8085 	bne.w	800364c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	60fb      	str	r3, [r7, #12]
  return(result);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d17e      	bne.n	800364c <osMutexNew+0x124>
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <osMutexNew+0x130>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d105      	bne.n	8003562 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003556:	f3ef 8311 	mrs	r3, BASEPRI
 800355a:	60bb      	str	r3, [r7, #8]
  return(result);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d174      	bne.n	800364c <osMutexNew+0x124>
    if (attr != NULL) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	e001      	b.n	8003574 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <osMutexNew+0x5c>
      rmtx = 1U;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e001      	b.n	8003588 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d15c      	bne.n	800364c <osMutexNew+0x124>
      mem = -1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <osMutexNew+0x8c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b4f      	cmp	r3, #79	; 0x4f
 80035ac:	d902      	bls.n	80035b4 <osMutexNew+0x8c>
          mem = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e00c      	b.n	80035ce <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <osMutexNew+0xa6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <osMutexNew+0xa6>
            mem = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	e001      	b.n	80035ce <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d112      	bne.n	80035fa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4619      	mov	r1, r3
 80035e0:	2004      	movs	r0, #4
 80035e2:	f000 fcaf 	bl	8003f44 <xQueueCreateMutexStatic>
 80035e6:	6278      	str	r0, [r7, #36]	; 0x24
 80035e8:	e016      	b.n	8003618 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4619      	mov	r1, r3
 80035f0:	2001      	movs	r0, #1
 80035f2:	f000 fca7 	bl	8003f44 <xQueueCreateMutexStatic>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24
 80035f8:	e00e      	b.n	8003618 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003606:	2004      	movs	r0, #4
 8003608:	f000 fc84 	bl	8003f14 <xQueueCreateMutex>
 800360c:	6278      	str	r0, [r7, #36]	; 0x24
 800360e:	e003      	b.n	8003618 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003610:	2001      	movs	r0, #1
 8003612:	f000 fc7f 	bl	8003f14 <xQueueCreateMutex>
 8003616:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <osMutexNew+0x110>
        if (attr != NULL) {
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <osMutexNew+0x104>
          name = attr->name;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e001      	b.n	8003630 <osMutexNew+0x108>
        } else {
          name = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003634:	f001 fa36 	bl	8004aa4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <osMutexNew+0x124>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200000f8 	.word	0x200000f8

0800365c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800367a:	f3ef 8305 	mrs	r3, IPSR
 800367e:	613b      	str	r3, [r7, #16]
  return(result);
 8003680:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	60fb      	str	r3, [r7, #12]
  return(result);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <osMutexAcquire+0x4a>
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <osMutexAcquire+0xb8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d109      	bne.n	80036ae <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800369a:	f3ef 8311 	mrs	r3, BASEPRI
 800369e:	60bb      	str	r3, [r7, #8]
  return(result);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <osMutexAcquire+0x52>
    stat = osErrorISR;
 80036a6:	f06f 0305 	mvn.w	r3, #5
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e02c      	b.n	8003708 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80036b4:	f06f 0303 	mvn.w	r3, #3
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e025      	b.n	8003708 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d011      	beq.n	80036e6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	69b8      	ldr	r0, [r7, #24]
 80036c6:	f000 fc8c 	bl	8003fe2 <xQueueTakeMutexRecursive>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d01b      	beq.n	8003708 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80036d6:	f06f 0301 	mvn.w	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e014      	b.n	8003708 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80036de:	f06f 0302 	mvn.w	r3, #2
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	e010      	b.n	8003708 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	69b8      	ldr	r0, [r7, #24]
 80036ea:	f000 ff27 	bl	800453c <xQueueSemaphoreTake>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d009      	beq.n	8003708 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80036fa:	f06f 0301 	mvn.w	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e002      	b.n	8003708 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003702:	f06f 0302 	mvn.w	r3, #2
 8003706:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003708:	69fb      	ldr	r3, [r7, #28]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200000f8 	.word	0x200000f8

08003718 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003734:	f3ef 8305 	mrs	r3, IPSR
 8003738:	613b      	str	r3, [r7, #16]
  return(result);
 800373a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10f      	bne.n	8003760 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003740:	f3ef 8310 	mrs	r3, PRIMASK
 8003744:	60fb      	str	r3, [r7, #12]
  return(result);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <osMutexRelease+0x48>
 800374c:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <osMutexRelease+0x9c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d109      	bne.n	8003768 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003754:	f3ef 8311 	mrs	r3, BASEPRI
 8003758:	60bb      	str	r3, [r7, #8]
  return(result);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003760:	f06f 0305 	mvn.w	r3, #5
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e01f      	b.n	80037a8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800376e:	f06f 0303 	mvn.w	r3, #3
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e018      	b.n	80037a8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800377c:	69b8      	ldr	r0, [r7, #24]
 800377e:	f000 fbfc 	bl	8003f7a <xQueueGiveMutexRecursive>
 8003782:	4603      	mov	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d00f      	beq.n	80037a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003788:	f06f 0302 	mvn.w	r3, #2
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e00b      	b.n	80037a8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003790:	2300      	movs	r3, #0
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	69b8      	ldr	r0, [r7, #24]
 8003798:	f000 fc5a 	bl	8004050 <xQueueGenericSend>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d002      	beq.n	80037a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80037a2:	f06f 0302 	mvn.w	r3, #2
 80037a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80037a8:	69fb      	ldr	r3, [r7, #28]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200000f8 	.word	0x200000f8

080037b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	; 0x30
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037c8:	f3ef 8305 	mrs	r3, IPSR
 80037cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80037ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d16f      	bne.n	80038b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	617b      	str	r3, [r7, #20]
  return(result);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d169      	bne.n	80038b4 <osMessageQueueNew+0xfc>
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <osMessageQueueNew+0x108>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d105      	bne.n	80037f4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037e8:	f3ef 8311 	mrs	r3, BASEPRI
 80037ec:	613b      	str	r3, [r7, #16]
  return(result);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d15f      	bne.n	80038b4 <osMessageQueueNew+0xfc>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d05c      	beq.n	80038b4 <osMessageQueueNew+0xfc>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d059      	beq.n	80038b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d029      	beq.n	8003860 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <osMessageQueueNew+0x82>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b4f      	cmp	r3, #79	; 0x4f
 800381a:	d90e      	bls.n	800383a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	429a      	cmp	r2, r3
 8003832:	d302      	bcc.n	800383a <osMessageQueueNew+0x82>
        mem = 1;
 8003834:	2301      	movs	r3, #1
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	e014      	b.n	8003864 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d110      	bne.n	8003864 <osMessageQueueNew+0xac>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <osMessageQueueNew+0xac>
          mem = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	e001      	b.n	8003864 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10b      	bne.n	8003882 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2100      	movs	r1, #0
 8003874:	9100      	str	r1, [sp, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa59 	bl	8003d30 <xQueueGenericCreateStatic>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24
 8003880:	e008      	b.n	8003894 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003888:	2200      	movs	r2, #0
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fac6 	bl	8003e1e <xQueueGenericCreate>
 8003892:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e001      	b.n	80038ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038b0:	f001 f8f8 	bl	8004aa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200000f8 	.word	0x200000f8

080038c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038dc:	f3ef 8305 	mrs	r3, IPSR
 80038e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80038e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <osMessageQueuePut+0x44>
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <osMessageQueuePut+0xe0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d12e      	bne.n	800395a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003900:	617b      	str	r3, [r7, #20]
  return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d028      	beq.n	800395a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <osMessageQueuePut+0x56>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <osMessageQueuePut+0x56>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800391a:	f06f 0303 	mvn.w	r3, #3
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003920:	e039      	b.n	8003996 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003926:	f107 0210 	add.w	r2, r7, #16
 800392a:	2300      	movs	r3, #0
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6a38      	ldr	r0, [r7, #32]
 8003930:	f000 fc8c 	bl	800424c <xQueueGenericSendFromISR>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d003      	beq.n	8003942 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800393a:	f06f 0302 	mvn.w	r3, #2
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003940:	e029      	b.n	8003996 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d026      	beq.n	8003996 <osMessageQueuePut+0xd2>
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <osMessageQueuePut+0xe4>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003958:	e01d      	b.n	8003996 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <osMessageQueuePut+0xa2>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003966:	f06f 0303 	mvn.w	r3, #3
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e014      	b.n	8003998 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800396e:	2300      	movs	r3, #0
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6a38      	ldr	r0, [r7, #32]
 8003976:	f000 fb6b 	bl	8004050 <xQueueGenericSend>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d00b      	beq.n	8003998 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003986:	f06f 0301 	mvn.w	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	e004      	b.n	8003998 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800398e:	f06f 0302 	mvn.w	r3, #2
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e000      	b.n	8003998 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003996:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800399a:	4618      	mov	r0, r3
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200000f8 	.word	0x200000f8
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c2:	f3ef 8305 	mrs	r3, IPSR
 80039c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80039c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ce:	f3ef 8310 	mrs	r3, PRIMASK
 80039d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <osMessageQueueGet+0x42>
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <osMessageQueueGet+0xdc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d12e      	bne.n	8003a40 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039e2:	f3ef 8311 	mrs	r3, BASEPRI
 80039e6:	617b      	str	r3, [r7, #20]
  return(result);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d028      	beq.n	8003a40 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <osMessageQueueGet+0x54>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <osMessageQueueGet+0x54>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003a00:	f06f 0303 	mvn.w	r3, #3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a06:	e038      	b.n	8003a7a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003a0c:	f107 0310 	add.w	r3, r7, #16
 8003a10:	461a      	mov	r2, r3
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	6a38      	ldr	r0, [r7, #32]
 8003a16:	f000 fe9d 	bl	8004754 <xQueueReceiveFromISR>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d003      	beq.n	8003a28 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003a20:	f06f 0302 	mvn.w	r3, #2
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a26:	e028      	b.n	8003a7a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d025      	beq.n	8003a7a <osMessageQueueGet+0xce>
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <osMessageQueueGet+0xe0>)
 8003a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a3e:	e01c      	b.n	8003a7a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <osMessageQueueGet+0xa0>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003a4c:	f06f 0303 	mvn.w	r3, #3
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	e013      	b.n	8003a7c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	6a38      	ldr	r0, [r7, #32]
 8003a5a:	f000 fc8f 	bl	800437c <xQueueReceive>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d00b      	beq.n	8003a7c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003a6a:	f06f 0301 	mvn.w	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e004      	b.n	8003a7c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003a72:	f06f 0302 	mvn.w	r3, #2
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
 8003a78:	e000      	b.n	8003a7c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a7a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200000f8 	.word	0x200000f8
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <vApplicationGetIdleTaskMemory+0x2c>)
 8003aa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4a06      	ldr	r2, [pc, #24]	; (8003ac0 <vApplicationGetIdleTaskMemory+0x30>)
 8003aa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200000fc 	.word	0x200000fc
 8003ac0:	20000158 	.word	0x20000158

08003ac4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ad4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <vApplicationGetTimerTaskMemory+0x30>)
 8003ada:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000358 	.word	0x20000358
 8003af4:	200003b4 	.word	0x200003b4

08003af8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0208 	add.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0208 	add.w	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0208 	add.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e00c      	b.n	8003bd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e002      	b.n	8003bc8 <vListInsert+0x2e>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d2f6      	bcs.n	8003bc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d103      	bne.n	8003c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c8a:	f002 fc8b 	bl	80065a4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fc5d 	bl	80055ac <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <xQueueGenericReset+0xcc>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	e009      	b.n	8003d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fef2 	bl	8003af8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff feed 	bl	8003af8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f002 fc71 	bl	8006604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d22:	2301      	movs	r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <xQueueGenericCreateStatic+0x52>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <xQueueGenericCreateStatic+0x56>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <xQueueGenericCreateStatic+0x58>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	623b      	str	r3, [r7, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <xQueueGenericCreateStatic+0x7e>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <xQueueGenericCreateStatic+0x82>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <xQueueGenericCreateStatic+0x84>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61fb      	str	r3, [r7, #28]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dce:	2350      	movs	r3, #80	; 0x50
 8003dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b50      	cmp	r3, #80	; 0x50
 8003dd6:	d00a      	beq.n	8003dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f843 	bl	8003e9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3730      	adds	r7, #48	; 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	; 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	613b      	str	r3, [r7, #16]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e004      	b.n	8003e5e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3350      	adds	r3, #80	; 0x50
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 fcc0 	bl	80067e8 <pvPortMalloc>
 8003e68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	3350      	adds	r3, #80	; 0x50
 8003e74:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f805 	bl	8003e9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e90:	69bb      	ldr	r3, [r7, #24]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ec8:	2101      	movs	r1, #1
 8003eca:	69b8      	ldr	r0, [r7, #24]
 8003ecc:	f7ff fec8 	bl	8003c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f00:	2300      	movs	r3, #0
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8a2 	bl	8004050 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6939      	ldr	r1, [r7, #16]
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7ff ff76 	bl	8003e1e <xQueueGenericCreate>
 8003f32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff ffd3 	bl	8003ee0 <prvInitialiseMutex>

		return pxNewQueue;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	6039      	str	r1, [r7, #0]
 8003f4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	f7ff fee4 	bl	8003d30 <xQueueGenericCreateStatic>
 8003f68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ffb8 	bl	8003ee0 <prvInitialiseMutex>

		return pxNewQueue;
 8003f70:	68fb      	ldr	r3, [r7, #12]
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003f7a:	b590      	push	{r4, r7, lr}
 8003f7c:	b087      	sub	sp, #28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	685c      	ldr	r4, [r3, #4]
 8003fa6:	f001 fcc5 	bl	8005934 <xTaskGetCurrentTaskHandle>
 8003faa:	4603      	mov	r3, r0
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d111      	bne.n	8003fd4 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	6938      	ldr	r0, [r7, #16]
 8003fca:	f000 f841 	bl	8004050 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e001      	b.n	8003fd8 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003fd8:	697b      	ldr	r3, [r7, #20]
	}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd90      	pop	{r4, r7, pc}

08003fe2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003fe2:	b590      	push	{r4, r7, lr}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	60fb      	str	r3, [r7, #12]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	685c      	ldr	r4, [r3, #4]
 8004010:	f001 fc90 	bl	8005934 <xTaskGetCurrentTaskHandle>
 8004014:	4603      	mov	r3, r0
 8004016:	429c      	cmp	r4, r3
 8004018:	d107      	bne.n	800402a <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e00c      	b.n	8004044 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6938      	ldr	r0, [r7, #16]
 800402e:	f000 fa85 	bl	800453c <xQueueSemaphoreTake>
 8004032:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004044:	697b      	ldr	r3, [r7, #20]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
	...

08004050 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xQueueGenericSend+0x32>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <xQueueGenericSend+0x40>
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <xQueueGenericSend+0x44>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <xQueueGenericSend+0x46>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <xQueueGenericSend+0x60>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d103      	bne.n	80040be <xQueueGenericSend+0x6e>
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <xQueueGenericSend+0x72>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <xQueueGenericSend+0x74>
 80040c2:	2300      	movs	r3, #0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <xQueueGenericSend+0x8e>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	623b      	str	r3, [r7, #32]
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040de:	f001 fc39 	bl	8005954 <xTaskGetSchedulerState>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <xQueueGenericSend+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <xQueueGenericSend+0xa2>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <xQueueGenericSend+0xa4>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xQueueGenericSend+0xbe>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61fb      	str	r3, [r7, #28]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800410e:	f002 fa49 	bl	80065a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <xQueueGenericSend+0xd4>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d129      	bne.n	8004178 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800412a:	f000 fbab 	bl	8004884 <prvCopyDataToQueue>
 800412e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fa35 	bl	80055ac <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <xQueueGenericSend+0x1f8>)
 800414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	e00a      	b.n	8004170 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <xQueueGenericSend+0x1f8>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004170:	f002 fa48 	bl	8006604 <vPortExitCritical>
				return pdPASS;
 8004174:	2301      	movs	r3, #1
 8004176:	e063      	b.n	8004240 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800417e:	f002 fa41 	bl	8006604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004182:	2300      	movs	r3, #0
 8004184:	e05c      	b.n	8004240 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fa6f 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004196:	2301      	movs	r3, #1
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800419a:	f002 fa33 	bl	8006604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800419e:	f000 ffdd 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041a2:	f002 f9ff 	bl	80065a4 <vPortEnterCritical>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d103      	bne.n	80041bc <xQueueGenericSend+0x16c>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c2:	b25b      	sxtb	r3, r3
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d103      	bne.n	80041d2 <xQueueGenericSend+0x182>
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d2:	f002 fa17 	bl	8006604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041d6:	1d3a      	adds	r2, r7, #4
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fa5e 	bl	80056a0 <xTaskCheckForTimeOut>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d124      	bne.n	8004234 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ec:	f000 fc42 	bl	8004a74 <prvIsQueueFull>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	3310      	adds	r3, #16
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f984 	bl	800550c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004206:	f000 fbcd 	bl	80049a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800420a:	f000 ffb5 	bl	8005178 <xTaskResumeAll>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f af7c 	bne.w	800410e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <xQueueGenericSend+0x1f8>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	e772      	b.n	800410e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800422a:	f000 fbbb 	bl	80049a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800422e:	f000 ffa3 	bl	8005178 <xTaskResumeAll>
 8004232:	e76c      	b.n	800410e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fbb5 	bl	80049a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800423a:	f000 ff9d 	bl	8005178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800423e:	2300      	movs	r3, #0
		}
	}
}
 8004240:	4618      	mov	r0, r3
 8004242:	3738      	adds	r7, #56	; 0x38
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	; 0x38
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004276:	bf00      	nop
 8004278:	e7fe      	b.n	8004278 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <xQueueGenericSendFromISR+0x3c>
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <xQueueGenericSendFromISR+0x40>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <xQueueGenericSendFromISR+0x42>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	623b      	str	r3, [r7, #32]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSendFromISR+0x6a>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <xQueueGenericSendFromISR+0x6e>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <xQueueGenericSendFromISR+0x70>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61fb      	str	r3, [r7, #28]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042d6:	f002 fa47 	bl	8006768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042da:	f3ef 8211 	mrs	r2, BASEPRI
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	61ba      	str	r2, [r7, #24]
 80042f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <xQueueGenericSendFromISR+0xbc>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d12c      	bne.n	8004362 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004318:	f000 fab4 	bl	8004884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800431c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d112      	bne.n	800434c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	3324      	adds	r3, #36	; 0x24
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f93a 	bl	80055ac <xTaskRemoveFromEventList>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00e      	beq.n	800435c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e007      	b.n	800435c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800434c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004350:	3301      	adds	r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	b25a      	sxtb	r2, r3
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004360:	e001      	b.n	8004366 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004370:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004374:	4618      	mov	r0, r3
 8004376:	3738      	adds	r7, #56	; 0x38
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xQueueReceive+0x30>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	623b      	str	r3, [r7, #32]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <xQueueReceive+0x3e>
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xQueueReceive+0x42>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueReceive+0x44>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueReceive+0x5e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61fb      	str	r3, [r7, #28]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043da:	f001 fabb 	bl	8005954 <xTaskGetSchedulerState>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xQueueReceive+0x6e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <xQueueReceive+0x72>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueReceive+0x74>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xQueueReceive+0x8e>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	61bb      	str	r3, [r7, #24]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800440a:	f002 f8cb 	bl	80065a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01f      	beq.n	800445a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	f000 fa9b 	bl	8004958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00f      	beq.n	8004452 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	3310      	adds	r3, #16
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f8b8 	bl	80055ac <xTaskRemoveFromEventList>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004442:	4b3d      	ldr	r3, [pc, #244]	; (8004538 <xQueueReceive+0x1bc>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004452:	f002 f8d7 	bl	8006604 <vPortExitCritical>
				return pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	e069      	b.n	800452e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004460:	f002 f8d0 	bl	8006604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004464:	2300      	movs	r3, #0
 8004466:	e062      	b.n	800452e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f8fe 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800447c:	f002 f8c2 	bl	8006604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004480:	f000 fe6c 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004484:	f002 f88e 	bl	80065a4 <vPortEnterCritical>
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d103      	bne.n	800449e <xQueueReceive+0x122>
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d103      	bne.n	80044b4 <xQueueReceive+0x138>
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b4:	f002 f8a6 	bl	8006604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044b8:	1d3a      	adds	r2, r7, #4
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 f8ed 	bl	80056a0 <xTaskCheckForTimeOut>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d123      	bne.n	8004514 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ce:	f000 fabb 	bl	8004a48 <prvIsQueueEmpty>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 f813 	bl	800550c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e8:	f000 fa5c 	bl	80049a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044ec:	f000 fe44 	bl	8005178 <xTaskResumeAll>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d189      	bne.n	800440a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <xQueueReceive+0x1bc>)
 80044f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	e780      	b.n	800440a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450a:	f000 fa4b 	bl	80049a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800450e:	f000 fe33 	bl	8005178 <xTaskResumeAll>
 8004512:	e77a      	b.n	800440a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004516:	f000 fa45 	bl	80049a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800451a:	f000 fe2d 	bl	8005178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800451e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004520:	f000 fa92 	bl	8004a48 <prvIsQueueEmpty>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	f43f af6f 	beq.w	800440a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800452c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800452e:	4618      	mov	r0, r3
 8004530:	3730      	adds	r7, #48	; 0x30
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08e      	sub	sp, #56	; 0x38
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	623b      	str	r3, [r7, #32]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61fb      	str	r3, [r7, #28]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800458c:	f001 f9e2 	bl	8005954 <xTaskGetSchedulerState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <xQueueSemaphoreTake+0x60>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <xQueueSemaphoreTake+0x64>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <xQueueSemaphoreTake+0x66>
 80045a0:	2300      	movs	r3, #0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10a      	bne.n	80045bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	61bb      	str	r3, [r7, #24]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80045bc:	f001 fff2 	bl	80065a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d024      	beq.n	8004616 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80045dc:	f001 fb3a 	bl	8005c54 <pvTaskIncrementMutexHeldCount>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00f      	beq.n	800460e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	3310      	adds	r3, #16
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ffda 	bl	80055ac <xTaskRemoveFromEventList>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045fe:	4b54      	ldr	r3, [pc, #336]	; (8004750 <xQueueSemaphoreTake+0x214>)
 8004600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800460e:	f001 fff9 	bl	8006604 <vPortExitCritical>
				return pdPASS;
 8004612:	2301      	movs	r3, #1
 8004614:	e097      	b.n	8004746 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	617b      	str	r3, [r7, #20]
}
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004638:	f001 ffe4 	bl	8006604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800463c:	2300      	movs	r3, #0
 800463e:	e082      	b.n	8004746 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f001 f812 	bl	8005674 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004654:	f001 ffd6 	bl	8006604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004658:	f000 fd80 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800465c:	f001 ffa2 	bl	80065a4 <vPortEnterCritical>
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004666:	b25b      	sxtb	r3, r3
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d103      	bne.n	8004676 <xQueueSemaphoreTake+0x13a>
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800467c:	b25b      	sxtb	r3, r3
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d103      	bne.n	800468c <xQueueSemaphoreTake+0x150>
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800468c:	f001 ffba 	bl	8006604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004690:	463a      	mov	r2, r7
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f001 f801 	bl	80056a0 <xTaskCheckForTimeOut>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d132      	bne.n	800470a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046a6:	f000 f9cf 	bl	8004a48 <prvIsQueueEmpty>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d026      	beq.n	80046fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80046b8:	f001 ff74 	bl	80065a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 f965 	bl	8005990 <xTaskPriorityInherit>
 80046c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046c8:	f001 ff9c 	bl	8006604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	3324      	adds	r3, #36	; 0x24
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 ff19 	bl	800550c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046dc:	f000 f962 	bl	80049a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046e0:	f000 fd4a 	bl	8005178 <xTaskResumeAll>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f47f af68 	bne.w	80045bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <xQueueSemaphoreTake+0x214>)
 80046ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	e75e      	b.n	80045bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004700:	f000 f950 	bl	80049a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004704:	f000 fd38 	bl	8005178 <xTaskResumeAll>
 8004708:	e758      	b.n	80045bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800470a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470c:	f000 f94a 	bl	80049a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004710:	f000 fd32 	bl	8005178 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004716:	f000 f997 	bl	8004a48 <prvIsQueueEmpty>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	f43f af4d 	beq.w	80045bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004728:	f001 ff3c 	bl	80065a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800472c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800472e:	f000 f891 	bl	8004854 <prvGetDisinheritPriorityAfterTimeout>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fa04 	bl	8005b48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004740:	f001 ff60 	bl	8006604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004746:	4618      	mov	r0, r3
 8004748:	3738      	adds	r7, #56	; 0x38
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08e      	sub	sp, #56	; 0x38
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	623b      	str	r3, [r7, #32]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <xQueueReceiveFromISR+0x3a>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <xQueueReceiveFromISR+0x3e>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <xQueueReceiveFromISR+0x40>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	61fb      	str	r3, [r7, #28]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ae:	f001 ffdb 	bl	8006768 <vPortValidateInterruptPriority>
	__asm volatile
 80047b2:	f3ef 8211 	mrs	r2, BASEPRI
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61ba      	str	r2, [r7, #24]
 80047c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80047ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02f      	beq.n	800483a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e8:	f000 f8b6 	bl	8004958 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80047f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d112      	bne.n	8004824 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	3310      	adds	r3, #16
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fece 	bl	80055ac <xTaskRemoveFromEventList>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e007      	b.n	8004834 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004828:	3301      	adds	r3, #1
 800482a:	b2db      	uxtb	r3, r3
 800482c:	b25a      	sxtb	r2, r3
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004834:	2301      	movs	r3, #1
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	e001      	b.n	800483e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800483a:	2300      	movs	r3, #0
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f383 8811 	msr	BASEPRI, r3
}
 8004848:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800484c:	4618      	mov	r0, r3
 800484e:	3738      	adds	r7, #56	; 0x38
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	e001      	b.n	8004876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004876:	68fb      	ldr	r3, [r7, #12]
	}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d14d      	bne.n	8004946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f8dc 	bl	8005a6c <xTaskPriorityDisinherit>
 80048b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	e043      	b.n	8004946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d119      	bne.n	80048f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6898      	ldr	r0, [r3, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	461a      	mov	r2, r3
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	f002 f988 	bl	8006be4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d32b      	bcc.n	8004946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e026      	b.n	8004946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68d8      	ldr	r0, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	461a      	mov	r2, r3
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	f002 f96e 	bl	8006be4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	425b      	negs	r3, r3
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	425b      	negs	r3, r3
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d105      	bne.n	8004946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3b01      	subs	r3, #1
 8004944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800494e:	697b      	ldr	r3, [r7, #20]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d303      	bcc.n	800498c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68d9      	ldr	r1, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	461a      	mov	r2, r3
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f002 f924 	bl	8006be4 <memcpy>
	}
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049ac:	f001 fdfa 	bl	80065a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049b8:	e011      	b.n	80049de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d012      	beq.n	80049e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fdf0 	bl	80055ac <xTaskRemoveFromEventList>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049d2:	f000 fec7 	bl	8005764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	3b01      	subs	r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dce9      	bgt.n	80049ba <prvUnlockQueue+0x16>
 80049e6:	e000      	b.n	80049ea <prvUnlockQueue+0x46>
					break;
 80049e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049f2:	f001 fe07 	bl	8006604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049f6:	f001 fdd5 	bl	80065a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a02:	e011      	b.n	8004a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d012      	beq.n	8004a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fdcb 	bl	80055ac <xTaskRemoveFromEventList>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a1c:	f000 fea2 	bl	8005764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dce9      	bgt.n	8004a04 <prvUnlockQueue+0x60>
 8004a30:	e000      	b.n	8004a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	22ff      	movs	r2, #255	; 0xff
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a3c:	f001 fde2 	bl	8006604 <vPortExitCritical>
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a50:	f001 fda8 	bl	80065a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e001      	b.n	8004a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a66:	f001 fdcd 	bl	8006604 <vPortExitCritical>

	return xReturn;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a7c:	f001 fd92 	bl	80065a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d102      	bne.n	8004a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e001      	b.n	8004a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a96:	f001 fdb5 	bl	8006604 <vPortExitCritical>

	return xReturn;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e014      	b.n	8004ade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <vQueueAddToRegistry+0x50>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ac0:	490c      	ldr	r1, [pc, #48]	; (8004af4 <vQueueAddToRegistry+0x50>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <vQueueAddToRegistry+0x50>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ad6:	e006      	b.n	8004ae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	d9e7      	bls.n	8004ab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20001e5c 	.word	0x20001e5c

08004af8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b08:	f001 fd4c 	bl	80065a4 <vPortEnterCritical>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d103      	bne.n	8004b22 <vQueueWaitForMessageRestricted+0x2a>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d103      	bne.n	8004b38 <vQueueWaitForMessageRestricted+0x40>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b38:	f001 fd64 	bl	8006604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3324      	adds	r3, #36	; 0x24
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fd01 	bl	8005554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7ff ff26 	bl	80049a4 <prvUnlockQueue>
	}
 8004b58:	bf00      	nop
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	; 0x38
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	623b      	str	r3, [r7, #32]
}
 8004b86:	bf00      	nop
 8004b88:	e7fe      	b.n	8004b88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	61fb      	str	r3, [r7, #28]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ba6:	235c      	movs	r3, #92	; 0x5c
 8004ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b5c      	cmp	r3, #92	; 0x5c
 8004bae:	d00a      	beq.n	8004bc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	61bb      	str	r3, [r7, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01e      	beq.n	8004c0a <xTaskCreateStatic+0xaa>
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01b      	beq.n	8004c0a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004be4:	2300      	movs	r3, #0
 8004be6:	9303      	str	r3, [sp, #12]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f850 	bl	8004ca2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c04:	f000 f8d4 	bl	8004db0 <prvAddNewTaskToReadyList>
 8004c08:	e001      	b.n	8004c0e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c0e:	697b      	ldr	r3, [r7, #20]
	}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3728      	adds	r7, #40	; 0x28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af04      	add	r7, sp, #16
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fddb 	bl	80067e8 <pvPortMalloc>
 8004c32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c3a:	205c      	movs	r0, #92	; 0x5c
 8004c3c:	f001 fdd4 	bl	80067e8 <pvPortMalloc>
 8004c40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c4e:	e005      	b.n	8004c5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c50:	6978      	ldr	r0, [r7, #20]
 8004c52:	f001 fe8d 	bl	8006970 <vPortFree>
 8004c56:	e001      	b.n	8004c5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d017      	beq.n	8004c92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f80e 	bl	8004ca2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c86:	69f8      	ldr	r0, [r7, #28]
 8004c88:	f000 f892 	bl	8004db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	e002      	b.n	8004c98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
 8004c96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c98:	69bb      	ldr	r3, [r7, #24]
	}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	21a5      	movs	r1, #165	; 0xa5
 8004cbc:	f001 ffa0 	bl	8006c00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f023 0307 	bic.w	r3, r3, #7
 8004cd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	617b      	str	r3, [r7, #20]
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e012      	b.n	8004d26 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	7819      	ldrb	r1, [r3, #0]
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3334      	adds	r3, #52	; 0x34
 8004d10:	460a      	mov	r2, r1
 8004d12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d006      	beq.n	8004d2e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d9e9      	bls.n	8004d00 <prvInitialiseNewTask+0x5e>
 8004d2c:	e000      	b.n	8004d30 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004d2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b37      	cmp	r3, #55	; 0x37
 8004d3c:	d901      	bls.n	8004d42 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d3e:	2337      	movs	r3, #55	; 0x37
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe feed 	bl	8003b38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	3318      	adds	r3, #24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fee8 	bl	8003b38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	2200      	movs	r2, #0
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f001 fad9 	bl	8006348 <pxPortInitialiseStack>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004db8:	f001 fbf4 	bl	80065a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <prvAddNewTaskToReadyList+0xc4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <prvAddNewTaskToReadyList+0xc4>)
 8004dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dc6:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <prvAddNewTaskToReadyList+0xc8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dce:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <prvAddNewTaskToReadyList+0xc8>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <prvAddNewTaskToReadyList+0xc4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d110      	bne.n	8004dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ddc:	f000 fce6 	bl	80057ac <prvInitialiseTaskLists>
 8004de0:	e00d      	b.n	8004dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <prvAddNewTaskToReadyList+0xcc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <prvAddNewTaskToReadyList+0xc8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d802      	bhi.n	8004dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <prvAddNewTaskToReadyList+0xc8>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <prvAddNewTaskToReadyList+0xd0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <prvAddNewTaskToReadyList+0xd0>)
 8004e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e08:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <prvAddNewTaskToReadyList+0xd0>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <prvAddNewTaskToReadyList+0xd4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d903      	bls.n	8004e24 <prvAddNewTaskToReadyList+0x74>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <prvAddNewTaskToReadyList+0xd4>)
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <prvAddNewTaskToReadyList+0xd8>)
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fe fe89 	bl	8003b52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e40:	f001 fbe0 	bl	8006604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <prvAddNewTaskToReadyList+0xcc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00e      	beq.n	8004e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <prvAddNewTaskToReadyList+0xc8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d207      	bcs.n	8004e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <prvAddNewTaskToReadyList+0xdc>)
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000c88 	.word	0x20000c88
 8004e78:	200007b4 	.word	0x200007b4
 8004e7c:	20000c94 	.word	0x20000c94
 8004e80:	20000ca4 	.word	0x20000ca4
 8004e84:	20000c90 	.word	0x20000c90
 8004e88:	200007b8 	.word	0x200007b8
 8004e8c:	e000ed04 	.word	0xe000ed04

08004e90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004e98:	f001 fb84 	bl	80065a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <vTaskDelete+0x18>
 8004ea2:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <vTaskDelete+0xc4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <vTaskDelete+0x1a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe feab 	bl	8003c0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fea2 	bl	8003c0c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <vTaskDelete+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <vTaskDelete+0xc8>)
 8004ed0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <vTaskDelete+0xc4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d10b      	bne.n	8004ef4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	481e      	ldr	r0, [pc, #120]	; (8004f5c <vTaskDelete+0xcc>)
 8004ee4:	f7fe fe35 	bl	8003b52 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <vTaskDelete+0xd0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <vTaskDelete+0xd0>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e009      	b.n	8004f08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <vTaskDelete+0xd4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <vTaskDelete+0xd4>)
 8004efc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fcc2 	bl	8005888 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004f04:	f000 fcf0 	bl	80058e8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004f08:	f001 fb7c 	bl	8006604 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <vTaskDelete+0xd8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <vTaskDelete+0xc4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d116      	bne.n	8004f4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <vTaskDelete+0xdc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <vTaskDelete+0xac>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60bb      	str	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <vTaskDelete+0xe0>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	200007b4 	.word	0x200007b4
 8004f58:	20000ca4 	.word	0x20000ca4
 8004f5c:	20000c5c 	.word	0x20000c5c
 8004f60:	20000c70 	.word	0x20000c70
 8004f64:	20000c88 	.word	0x20000c88
 8004f68:	20000c94 	.word	0x20000c94
 8004f6c:	20000cb0 	.word	0x20000cb0
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <vTaskDelay+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <vTaskDelay+0x30>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fa4:	f000 f8da 	bl	800515c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fa8:	2100      	movs	r1, #0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fe66 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fb0:	f000 f8e2 	bl	8005178 <xTaskResumeAll>
 8004fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <vTaskDelay+0x64>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000cb0 	.word	0x20000cb0
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <eTaskGetState+0x28>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60bb      	str	r3, [r7, #8]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <eTaskGetState+0xa0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d102      	bne.n	8005014 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
 8005012:	e02d      	b.n	8005070 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8005014:	f001 fac6 	bl	80065a4 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800501e:	f001 faf1 	bl	8006604 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <eTaskGetState+0xa4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d004      	beq.n	8005036 <eTaskGetState+0x5a>
 800502c:	4b15      	ldr	r3, [pc, #84]	; (8005084 <eTaskGetState+0xa8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	429a      	cmp	r2, r3
 8005034:	d102      	bne.n	800503c <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005036:	2302      	movs	r3, #2
 8005038:	75fb      	strb	r3, [r7, #23]
 800503a:	e019      	b.n	8005070 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a12      	ldr	r2, [pc, #72]	; (8005088 <eTaskGetState+0xac>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d109      	bne.n	8005058 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 800504c:	2303      	movs	r3, #3
 800504e:	75fb      	strb	r3, [r7, #23]
 8005050:	e00e      	b.n	8005070 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8005052:	2302      	movs	r3, #2
 8005054:	75fb      	strb	r3, [r7, #23]
 8005056:	e00b      	b.n	8005070 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <eTaskGetState+0xb0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d002      	beq.n	8005066 <eTaskGetState+0x8a>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005066:	2304      	movs	r3, #4
 8005068:	75fb      	strb	r3, [r7, #23]
 800506a:	e001      	b.n	8005070 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200007b4 	.word	0x200007b4
 8005080:	20000c40 	.word	0x20000c40
 8005084:	20000c44 	.word	0x20000c44
 8005088:	20000c74 	.word	0x20000c74
 800508c:	20000c5c 	.word	0x20000c5c

08005090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800509e:	463a      	mov	r2, r7
 80050a0:	1d39      	adds	r1, r7, #4
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fcf2 	bl	8003a90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	9202      	str	r2, [sp, #8]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	2300      	movs	r3, #0
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2300      	movs	r3, #0
 80050bc:	460a      	mov	r2, r1
 80050be:	4921      	ldr	r1, [pc, #132]	; (8005144 <vTaskStartScheduler+0xb4>)
 80050c0:	4821      	ldr	r0, [pc, #132]	; (8005148 <vTaskStartScheduler+0xb8>)
 80050c2:	f7ff fd4d 	bl	8004b60 <xTaskCreateStatic>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <vTaskStartScheduler+0xbc>)
 80050ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050cc:	4b1f      	ldr	r3, [pc, #124]	; (800514c <vTaskStartScheduler+0xbc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e001      	b.n	80050de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d102      	bne.n	80050ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050e4:	f000 fe1e 	bl	8005d24 <xTimerCreateTimerTask>
 80050e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d116      	bne.n	800511e <vTaskStartScheduler+0x8e>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <vTaskStartScheduler+0xc0>)
 8005106:	f04f 32ff 	mov.w	r2, #4294967295
 800510a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <vTaskStartScheduler+0xc4>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <vTaskStartScheduler+0xc8>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005118:	f001 f9a2 	bl	8006460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800511c:	e00e      	b.n	800513c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d10a      	bne.n	800513c <vTaskStartScheduler+0xac>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <vTaskStartScheduler+0xaa>
}
 800513c:	bf00      	nop
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08006d08 	.word	0x08006d08
 8005148:	0800577d 	.word	0x0800577d
 800514c:	20000cac 	.word	0x20000cac
 8005150:	20000ca8 	.word	0x20000ca8
 8005154:	20000c94 	.word	0x20000c94
 8005158:	20000c8c 	.word	0x20000c8c

0800515c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vTaskSuspendAll+0x18>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	4a03      	ldr	r2, [pc, #12]	; (8005174 <vTaskSuspendAll+0x18>)
 8005168:	6013      	str	r3, [r2, #0]
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20000cb0 	.word	0x20000cb0

08005178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <xTaskResumeAll+0x118>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	603b      	str	r3, [r7, #0]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051a4:	f001 f9fe 	bl	80065a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051a8:	4b39      	ldr	r3, [pc, #228]	; (8005290 <xTaskResumeAll+0x118>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <xTaskResumeAll+0x118>)
 80051b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b2:	4b37      	ldr	r3, [pc, #220]	; (8005290 <xTaskResumeAll+0x118>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d162      	bne.n	8005280 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ba:	4b36      	ldr	r3, [pc, #216]	; (8005294 <xTaskResumeAll+0x11c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d05e      	beq.n	8005280 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051c2:	e02f      	b.n	8005224 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051c4:	4b34      	ldr	r3, [pc, #208]	; (8005298 <xTaskResumeAll+0x120>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3318      	adds	r3, #24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fd1b 	bl	8003c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3304      	adds	r3, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fd16 	bl	8003c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4b2d      	ldr	r3, [pc, #180]	; (800529c <xTaskResumeAll+0x124>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d903      	bls.n	80051f4 <xTaskResumeAll+0x7c>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <xTaskResumeAll+0x124>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <xTaskResumeAll+0x128>)
 8005202:	441a      	add	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fca1 	bl	8003b52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <xTaskResumeAll+0x12c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <xTaskResumeAll+0x130>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005224:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <xTaskResumeAll+0x120>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1cb      	bne.n	80051c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005232:	f000 fb59 	bl	80058e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <xTaskResumeAll+0x134>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005242:	f000 f847 	bl	80052d4 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <xTaskResumeAll+0x130>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3b01      	subs	r3, #1
 8005256:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f1      	bne.n	8005242 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <xTaskResumeAll+0x134>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005264:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <xTaskResumeAll+0x130>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <xTaskResumeAll+0x138>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005280:	f001 f9c0 	bl	8006604 <vPortExitCritical>

	return xAlreadyYielded;
 8005284:	68bb      	ldr	r3, [r7, #8]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000cb0 	.word	0x20000cb0
 8005294:	20000c88 	.word	0x20000c88
 8005298:	20000c48 	.word	0x20000c48
 800529c:	20000c90 	.word	0x20000c90
 80052a0:	200007b8 	.word	0x200007b8
 80052a4:	200007b4 	.word	0x200007b4
 80052a8:	20000c9c 	.word	0x20000c9c
 80052ac:	20000c98 	.word	0x20000c98
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <xTaskGetTickCount+0x1c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052c0:	687b      	ldr	r3, [r7, #4]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000c8c 	.word	0x20000c8c

080052d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052de:	4b51      	ldr	r3, [pc, #324]	; (8005424 <xTaskIncrementTick+0x150>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 808e 	bne.w	8005404 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052e8:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <xTaskIncrementTick+0x154>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052f0:	4a4d      	ldr	r2, [pc, #308]	; (8005428 <xTaskIncrementTick+0x154>)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d120      	bne.n	800533e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <xTaskIncrementTick+0x158>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <xTaskIncrementTick+0x48>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	603b      	str	r3, [r7, #0]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xTaskIncrementTick+0x46>
 800531c:	4b43      	ldr	r3, [pc, #268]	; (800542c <xTaskIncrementTick+0x158>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b43      	ldr	r3, [pc, #268]	; (8005430 <xTaskIncrementTick+0x15c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a41      	ldr	r2, [pc, #260]	; (800542c <xTaskIncrementTick+0x158>)
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4a41      	ldr	r2, [pc, #260]	; (8005430 <xTaskIncrementTick+0x15c>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b40      	ldr	r3, [pc, #256]	; (8005434 <xTaskIncrementTick+0x160>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a3f      	ldr	r2, [pc, #252]	; (8005434 <xTaskIncrementTick+0x160>)
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	f000 fad5 	bl	80058e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800533e:	4b3e      	ldr	r3, [pc, #248]	; (8005438 <xTaskIncrementTick+0x164>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d34e      	bcc.n	80053e6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005348:	4b38      	ldr	r3, [pc, #224]	; (800542c <xTaskIncrementTick+0x158>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <xTaskIncrementTick+0x82>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xTaskIncrementTick+0x84>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535c:	4b36      	ldr	r3, [pc, #216]	; (8005438 <xTaskIncrementTick+0x164>)
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	601a      	str	r2, [r3, #0]
					break;
 8005364:	e03f      	b.n	80053e6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005366:	4b31      	ldr	r3, [pc, #196]	; (800542c <xTaskIncrementTick+0x158>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d203      	bcs.n	8005386 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800537e:	4a2e      	ldr	r2, [pc, #184]	; (8005438 <xTaskIncrementTick+0x164>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6013      	str	r3, [r2, #0]
						break;
 8005384:	e02f      	b.n	80053e6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	3304      	adds	r3, #4
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fc3e 	bl	8003c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	3318      	adds	r3, #24
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe fc35 	bl	8003c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <xTaskIncrementTick+0x168>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <xTaskIncrementTick+0xe2>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4a22      	ldr	r2, [pc, #136]	; (800543c <xTaskIncrementTick+0x168>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <xTaskIncrementTick+0x16c>)
 80053c4:	441a      	add	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fe fbc0 	bl	8003b52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <xTaskIncrementTick+0x170>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d3b3      	bcc.n	8005348 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e4:	e7b0      	b.n	8005348 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053e6:	4b17      	ldr	r3, [pc, #92]	; (8005444 <xTaskIncrementTick+0x170>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	4914      	ldr	r1, [pc, #80]	; (8005440 <xTaskIncrementTick+0x16c>)
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d907      	bls.n	800540e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e004      	b.n	800540e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <xTaskIncrementTick+0x174>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a0f      	ldr	r2, [pc, #60]	; (8005448 <xTaskIncrementTick+0x174>)
 800540c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <xTaskIncrementTick+0x178>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000cb0 	.word	0x20000cb0
 8005428:	20000c8c 	.word	0x20000c8c
 800542c:	20000c40 	.word	0x20000c40
 8005430:	20000c44 	.word	0x20000c44
 8005434:	20000ca0 	.word	0x20000ca0
 8005438:	20000ca8 	.word	0x20000ca8
 800543c:	20000c90 	.word	0x20000c90
 8005440:	200007b8 	.word	0x200007b8
 8005444:	200007b4 	.word	0x200007b4
 8005448:	20000c98 	.word	0x20000c98
 800544c:	20000c9c 	.word	0x20000c9c

08005450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005456:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <vTaskSwitchContext+0xa8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800545e:	4b27      	ldr	r3, [pc, #156]	; (80054fc <vTaskSwitchContext+0xac>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005464:	e041      	b.n	80054ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005466:	4b25      	ldr	r3, [pc, #148]	; (80054fc <vTaskSwitchContext+0xac>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <vTaskSwitchContext+0xb0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e010      	b.n	8005496 <vTaskSwitchContext+0x46>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <vTaskSwitchContext+0x40>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	607b      	str	r3, [r7, #4]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vTaskSwitchContext+0x3e>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3b01      	subs	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	491b      	ldr	r1, [pc, #108]	; (8005504 <vTaskSwitchContext+0xb4>)
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0e4      	beq.n	8005474 <vTaskSwitchContext+0x24>
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <vTaskSwitchContext+0xb4>)
 80054b6:	4413      	add	r3, r2
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	3308      	adds	r3, #8
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d104      	bne.n	80054da <vTaskSwitchContext+0x8a>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a09      	ldr	r2, [pc, #36]	; (8005508 <vTaskSwitchContext+0xb8>)
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vTaskSwitchContext+0xb0>)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000cb0 	.word	0x20000cb0
 80054fc:	20000c9c 	.word	0x20000c9c
 8005500:	20000c90 	.word	0x20000c90
 8005504:	200007b8 	.word	0x200007b8
 8005508:	200007b4 	.word	0x200007b4

0800550c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <vTaskPlaceOnEventList+0x44>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3318      	adds	r3, #24
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fb2d 	bl	8003b9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005540:	2101      	movs	r1, #1
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f000 fb9a 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200007b4 	.word	0x200007b4

08005554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3318      	adds	r3, #24
 8005582:	4619      	mov	r1, r3
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7fe fae4 	bl	8003b52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	68b8      	ldr	r0, [r7, #8]
 800559a:	f000 fb6f 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
	}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200007b4 	.word	0x200007b4

080055ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60fb      	str	r3, [r7, #12]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	3318      	adds	r3, #24
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe fb15 	bl	8003c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <xTaskRemoveFromEventList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11d      	bne.n	8005626 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe fb0c 	bl	8003c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <xTaskRemoveFromEventList+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d903      	bls.n	8005608 <xTaskRemoveFromEventList+0x5c>
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <xTaskRemoveFromEventList+0xb4>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <xTaskRemoveFromEventList+0xb8>)
 8005616:	441a      	add	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f7fe fa97 	bl	8003b52 <vListInsertEnd>
 8005624:	e005      	b.n	8005632 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3318      	adds	r3, #24
 800562a:	4619      	mov	r1, r3
 800562c:	480e      	ldr	r0, [pc, #56]	; (8005668 <xTaskRemoveFromEventList+0xbc>)
 800562e:	f7fe fa90 	bl	8003b52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <xTaskRemoveFromEventList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d905      	bls.n	800564c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005644:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <xTaskRemoveFromEventList+0xc4>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e001      	b.n	8005650 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005650:	697b      	ldr	r3, [r7, #20]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000cb0 	.word	0x20000cb0
 8005660:	20000c90 	.word	0x20000c90
 8005664:	200007b8 	.word	0x200007b8
 8005668:	20000c48 	.word	0x20000c48
 800566c:	200007b4 	.word	0x200007b4
 8005670:	20000c9c 	.word	0x20000c9c

08005674 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <vTaskInternalSetTimeOutState+0x24>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <vTaskInternalSetTimeOutState+0x28>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000ca0 	.word	0x20000ca0
 800569c:	20000c8c 	.word	0x20000c8c

080056a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056e2:	f000 ff5f 	bl	80065a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056e6:	4b1d      	ldr	r3, [pc, #116]	; (800575c <xTaskCheckForTimeOut+0xbc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d102      	bne.n	8005706 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e023      	b.n	800574e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <xTaskCheckForTimeOut+0xc0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d007      	beq.n	8005722 <xTaskCheckForTimeOut+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	429a      	cmp	r2, r3
 800571a:	d302      	bcc.n	8005722 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800571c:	2301      	movs	r3, #1
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e015      	b.n	800574e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	429a      	cmp	r2, r3
 800572a:	d20b      	bcs.n	8005744 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad2      	subs	r2, r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ff9b 	bl	8005674 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	e004      	b.n	800574e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800574e:	f000 ff59 	bl	8006604 <vPortExitCritical>

	return xReturn;
 8005752:	69fb      	ldr	r3, [r7, #28]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000c8c 	.word	0x20000c8c
 8005760:	20000ca0 	.word	0x20000ca0

08005764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <vTaskMissedYield+0x14>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	20000c9c 	.word	0x20000c9c

0800577c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005784:	f000 f852 	bl	800582c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <prvIdleTask+0x28>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d9f9      	bls.n	8005784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <prvIdleTask+0x2c>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057a0:	e7f0      	b.n	8005784 <prvIdleTask+0x8>
 80057a2:	bf00      	nop
 80057a4:	200007b8 	.word	0x200007b8
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	e00c      	b.n	80057d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <prvInitialiseTaskLists+0x60>)
 80057c4:	4413      	add	r3, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe f996 	bl	8003af8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3301      	adds	r3, #1
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b37      	cmp	r3, #55	; 0x37
 80057d6:	d9ef      	bls.n	80057b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057d8:	480d      	ldr	r0, [pc, #52]	; (8005810 <prvInitialiseTaskLists+0x64>)
 80057da:	f7fe f98d 	bl	8003af8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057de:	480d      	ldr	r0, [pc, #52]	; (8005814 <prvInitialiseTaskLists+0x68>)
 80057e0:	f7fe f98a 	bl	8003af8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057e4:	480c      	ldr	r0, [pc, #48]	; (8005818 <prvInitialiseTaskLists+0x6c>)
 80057e6:	f7fe f987 	bl	8003af8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057ea:	480c      	ldr	r0, [pc, #48]	; (800581c <prvInitialiseTaskLists+0x70>)
 80057ec:	f7fe f984 	bl	8003af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057f0:	480b      	ldr	r0, [pc, #44]	; (8005820 <prvInitialiseTaskLists+0x74>)
 80057f2:	f7fe f981 	bl	8003af8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <prvInitialiseTaskLists+0x78>)
 80057f8:	4a05      	ldr	r2, [pc, #20]	; (8005810 <prvInitialiseTaskLists+0x64>)
 80057fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <prvInitialiseTaskLists+0x7c>)
 80057fe:	4a05      	ldr	r2, [pc, #20]	; (8005814 <prvInitialiseTaskLists+0x68>)
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200007b8 	.word	0x200007b8
 8005810:	20000c18 	.word	0x20000c18
 8005814:	20000c2c 	.word	0x20000c2c
 8005818:	20000c48 	.word	0x20000c48
 800581c:	20000c5c 	.word	0x20000c5c
 8005820:	20000c74 	.word	0x20000c74
 8005824:	20000c40 	.word	0x20000c40
 8005828:	20000c44 	.word	0x20000c44

0800582c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005832:	e019      	b.n	8005868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005834:	f000 feb6 	bl	80065a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005838:	4b10      	ldr	r3, [pc, #64]	; (800587c <prvCheckTasksWaitingTermination+0x50>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe f9e1 	bl	8003c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <prvCheckTasksWaitingTermination+0x54>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <prvCheckTasksWaitingTermination+0x54>)
 8005852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3b01      	subs	r3, #1
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 800585c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800585e:	f000 fed1 	bl	8006604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f810 	bl	8005888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <prvCheckTasksWaitingTermination+0x58>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e1      	bne.n	8005834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000c5c 	.word	0x20000c5c
 8005880:	20000c88 	.word	0x20000c88
 8005884:	20000c70 	.word	0x20000c70

08005888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f866 	bl	8006970 <vPortFree>
				vPortFree( pxTCB );
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f863 	bl	8006970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058aa:	e018      	b.n	80058de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d103      	bne.n	80058be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f85a 	bl	8006970 <vPortFree>
	}
 80058bc:	e00f      	b.n	80058de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d00a      	beq.n	80058de <prvDeleteTCB+0x56>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvDeleteTCB+0x54>
	}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <prvResetNextTaskUnblockTime+0x44>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <prvResetNextTaskUnblockTime+0x14>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <prvResetNextTaskUnblockTime+0x16>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <prvResetNextTaskUnblockTime+0x48>)
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800590a:	e008      	b.n	800591e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvResetNextTaskUnblockTime+0x44>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <prvResetNextTaskUnblockTime+0x48>)
 800591c:	6013      	str	r3, [r2, #0]
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000c40 	.word	0x20000c40
 8005930:	20000ca8 	.word	0x20000ca8

08005934 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <xTaskGetCurrentTaskHandle+0x1c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005940:	687b      	ldr	r3, [r7, #4]
	}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200007b4 	.word	0x200007b4

08005954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <xTaskGetSchedulerState+0x34>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005962:	2301      	movs	r3, #1
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	e008      	b.n	800597a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <xTaskGetSchedulerState+0x38>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005970:	2302      	movs	r3, #2
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e001      	b.n	800597a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800597a:	687b      	ldr	r3, [r7, #4]
	}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000c94 	.word	0x20000c94
 800598c:	20000cb0 	.word	0x20000cb0

08005990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d056      	beq.n	8005a54 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <xTaskPriorityInherit+0xd0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d246      	bcs.n	8005a42 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db06      	blt.n	80059ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059bc:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <xTaskPriorityInherit+0xd0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6959      	ldr	r1, [r3, #20]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <xTaskPriorityInherit+0xd4>)
 80059dc:	4413      	add	r3, r2
 80059de:	4299      	cmp	r1, r3
 80059e0:	d101      	bne.n	80059e6 <xTaskPriorityInherit+0x56>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xTaskPriorityInherit+0x58>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d022      	beq.n	8005a32 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	3304      	adds	r3, #4
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe f90b 	bl	8003c0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <xTaskPriorityInherit+0xd0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <xTaskPriorityInherit+0xd8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d903      	bls.n	8005a14 <xTaskPriorityInherit+0x84>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <xTaskPriorityInherit+0xd8>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <xTaskPriorityInherit+0xd4>)
 8005a22:	441a      	add	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe f891 	bl	8003b52 <vListInsertEnd>
 8005a30:	e004      	b.n	8005a3c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <xTaskPriorityInherit+0xd0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e008      	b.n	8005a54 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <xTaskPriorityInherit+0xd0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d201      	bcs.n	8005a54 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a54:	68fb      	ldr	r3, [r7, #12]
	}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200007b4 	.word	0x200007b4
 8005a64:	200007b8 	.word	0x200007b8
 8005a68:	20000c90 	.word	0x20000c90

08005a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d056      	beq.n	8005b30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <xTaskPriorityDisinherit+0xd0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d00a      	beq.n	8005aa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60bb      	str	r3, [r7, #8]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	1e5a      	subs	r2, r3, #1
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d02c      	beq.n	8005b30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d128      	bne.n	8005b30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe f892 	bl	8003c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <xTaskPriorityDisinherit+0xd4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d903      	bls.n	8005b10 <xTaskPriorityDisinherit+0xa4>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <xTaskPriorityDisinherit+0xd4>)
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <xTaskPriorityDisinherit+0xd8>)
 8005b1e:	441a      	add	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f7fe f813 	bl	8003b52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b30:	697b      	ldr	r3, [r7, #20]
	}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200007b4 	.word	0x200007b4
 8005b40:	20000c90 	.word	0x20000c90
 8005b44:	200007b8 	.word	0x200007b8

08005b48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b56:	2301      	movs	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d06f      	beq.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60fb      	str	r3, [r7, #12]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e002      	b.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d050      	beq.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d14b      	bne.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10a      	bne.n	8005bc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60bb      	str	r3, [r7, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db04      	blt.n	8005be6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d101      	bne.n	8005c00 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005c00:	2300      	movs	r3, #0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01c      	beq.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fd fffe 	bl	8003c0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c32:	441a      	add	r2, r3
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7fd ff89 	bl	8003b52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c40:	bf00      	nop
 8005c42:	3720      	adds	r7, #32
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	200007b4 	.word	0x200007b4
 8005c4c:	200007b8 	.word	0x200007b8
 8005c50:	20000c90 	.word	0x20000c90

08005c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c66:	3201      	adds	r2, #1
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
	}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	200007b4 	.word	0x200007b4

08005c7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd ffba 	bl	8003c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d10a      	bne.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4819      	ldr	r0, [pc, #100]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cb0:	f7fd ff4f 	bl	8003b52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb4:	e026      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d209      	bcs.n	8005ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fd ff5d 	bl	8003b9a <vListInsert>
}
 8005ce0:	e010      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fd ff53 	bl	8003b9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d202      	bcs.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cfe:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000c8c 	.word	0x20000c8c
 8005d10:	200007b4 	.word	0x200007b4
 8005d14:	20000c74 	.word	0x20000c74
 8005d18:	20000c44 	.word	0x20000c44
 8005d1c:	20000c40 	.word	0x20000c40
 8005d20:	20000ca8 	.word	0x20000ca8

08005d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d2e:	f000 facb 	bl	80062c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d32:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <xTimerCreateTimerTask+0x80>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d021      	beq.n	8005d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d42:	1d3a      	adds	r2, r7, #4
 8005d44:	f107 0108 	add.w	r1, r7, #8
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fd feb9 	bl	8003ac4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	9202      	str	r2, [sp, #8]
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	460a      	mov	r2, r1
 8005d64:	4910      	ldr	r1, [pc, #64]	; (8005da8 <xTimerCreateTimerTask+0x84>)
 8005d66:	4811      	ldr	r0, [pc, #68]	; (8005dac <xTimerCreateTimerTask+0x88>)
 8005d68:	f7fe fefa 	bl	8004b60 <xTaskCreateStatic>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <xTimerCreateTimerTask+0x8c>)
 8005d70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <xTimerCreateTimerTask+0x8c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000ce4 	.word	0x20000ce4
 8005da8:	08006d10 	.word	0x08006d10
 8005dac:	08005ed1 	.word	0x08005ed1
 8005db0:	20000ce8 	.word	0x20000ce8

08005db4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	623b      	str	r3, [r7, #32]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005de2:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <xTimerGenericCommand+0x98>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02a      	beq.n	8005e40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	dc18      	bgt.n	8005e2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dfc:	f7ff fdaa 	bl	8005954 <xTaskGetSchedulerState>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d109      	bne.n	8005e1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <xTimerGenericCommand+0x98>)
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	f107 0110 	add.w	r1, r7, #16
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	f7fe f91d 	bl	8004050 <xQueueGenericSend>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24
 8005e18:	e012      	b.n	8005e40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <xTimerGenericCommand+0x98>)
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	f107 0110 	add.w	r1, r7, #16
 8005e22:	2300      	movs	r3, #0
 8005e24:	2200      	movs	r2, #0
 8005e26:	f7fe f913 	bl	8004050 <xQueueGenericSend>
 8005e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e2c:	e008      	b.n	8005e40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <xTimerGenericCommand+0x98>)
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f107 0110 	add.w	r1, r7, #16
 8005e36:	2300      	movs	r3, #0
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	f7fe fa07 	bl	800424c <xQueueGenericSendFromISR>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3728      	adds	r7, #40	; 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000ce4 	.word	0x20000ce4

08005e50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <prvProcessExpiredTimer+0x7c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd fecf 	bl	8003c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d122      	bne.n	8005ebc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	18d1      	adds	r1, r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f000 f8c8 	bl	8006018 <prvInsertTimerInActiveList>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d016      	beq.n	8005ebc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	2100      	movs	r1, #0
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	f7ff ff8b 	bl	8005db4 <xTimerGenericCommand>
 8005e9e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60fb      	str	r3, [r7, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	6978      	ldr	r0, [r7, #20]
 8005ec2:	4798      	blx	r3
}
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000cdc 	.word	0x20000cdc

08005ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ed8:	f107 0308 	add.w	r3, r7, #8
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 f857 	bl	8005f90 <prvGetNextExpireTime>
 8005ee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f803 	bl	8005ef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005eee:	f000 f8d5 	bl	800609c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ef2:	e7f1      	b.n	8005ed8 <prvTimerTask+0x8>

08005ef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005efe:	f7ff f92d 	bl	800515c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f02:	f107 0308 	add.w	r3, r7, #8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f866 	bl	8005fd8 <prvSampleTimeNow>
 8005f0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d130      	bne.n	8005f76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <prvProcessTimerOrBlockTask+0x3c>
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d806      	bhi.n	8005f30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f22:	f7ff f929 	bl	8005178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff91 	bl	8005e50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f2e:	e024      	b.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <prvProcessTimerOrBlockTask+0x90>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <prvProcessTimerOrBlockTask+0x94>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4619      	mov	r1, r3
 8005f56:	f7fe fdcf 	bl	8004af8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f5a:	f7ff f90d 	bl	8005178 <xTaskResumeAll>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <prvProcessTimerOrBlockTask+0x98>)
 8005f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	f3bf 8f6f 	isb	sy
}
 8005f74:	e001      	b.n	8005f7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f76:	f7ff f8ff 	bl	8005178 <xTaskResumeAll>
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000ce0 	.word	0x20000ce0
 8005f88:	20000ce4 	.word	0x20000ce4
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f98:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <prvGetNextExpireTime+0x44>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <prvGetNextExpireTime+0x44>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e001      	b.n	8005fc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20000cdc 	.word	0x20000cdc

08005fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fe0:	f7ff f968 	bl	80052b4 <xTaskGetTickCount>
 8005fe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <prvSampleTimeNow+0x3c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d205      	bcs.n	8005ffc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ff0:	f000 f908 	bl	8006204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e002      	b.n	8006002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006002:	4a04      	ldr	r2, [pc, #16]	; (8006014 <prvSampleTimeNow+0x3c>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000cec 	.word	0x20000cec

08006018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d812      	bhi.n	8006064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e01b      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <prvInsertTimerInActiveList+0x7c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fd fd9c 	bl	8003b9a <vListInsert>
 8006062:	e012      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d206      	bcs.n	800607a <prvInsertTimerInActiveList+0x62>
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e007      	b.n	800608a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <prvInsertTimerInActiveList+0x80>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fd fd88 	bl	8003b9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800608a:	697b      	ldr	r3, [r7, #20]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000ce0 	.word	0x20000ce0
 8006098:	20000cdc 	.word	0x20000cdc

0800609c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	; 0x38
 80060a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a2:	e09d      	b.n	80061e0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da18      	bge.n	80060dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	3304      	adds	r3, #4
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61fb      	str	r3, [r7, #28]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d2:	6850      	ldr	r0, [r2, #4]
 80060d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d6:	6892      	ldr	r2, [r2, #8]
 80060d8:	4611      	mov	r1, r2
 80060da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db7d      	blt.n	80061de <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fd fd8a 	bl	8003c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060f8:	463b      	mov	r3, r7
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ff6c 	bl	8005fd8 <prvSampleTimeNow>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b09      	cmp	r3, #9
 8006106:	d86b      	bhi.n	80061e0 <prvProcessReceivedCommands+0x144>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <prvProcessReceivedCommands+0x74>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006139 	.word	0x08006139
 8006114:	08006139 	.word	0x08006139
 8006118:	08006139 	.word	0x08006139
 800611c:	080061e1 	.word	0x080061e1
 8006120:	08006195 	.word	0x08006195
 8006124:	080061cd 	.word	0x080061cd
 8006128:	08006139 	.word	0x08006139
 800612c:	08006139 	.word	0x08006139
 8006130:	080061e1 	.word	0x080061e1
 8006134:	08006195 	.word	0x08006195
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	18d1      	adds	r1, r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006146:	f7ff ff67 	bl	8006018 <prvInsertTimerInActiveList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d047      	beq.n	80061e0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006156:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d13f      	bne.n	80061e0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	441a      	add	r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	2100      	movs	r1, #0
 8006170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006172:	f7ff fe1f 	bl	8005db4 <xTimerGenericCommand>
 8006176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d130      	bne.n	80061e0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61bb      	str	r3, [r7, #24]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	617b      	str	r3, [r7, #20]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	18d1      	adds	r1, r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c6:	f7ff ff27 	bl	8006018 <prvInsertTimerInActiveList>
					break;
 80061ca:	e009      	b.n	80061e0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80061d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d8:	f000 fbca 	bl	8006970 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061dc:	e000      	b.n	80061e0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvProcessReceivedCommands+0x164>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	1d39      	adds	r1, r7, #4
 80061e6:	2200      	movs	r2, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe f8c7 	bl	800437c <xQueueReceive>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af57 	bne.w	80060a4 <prvProcessReceivedCommands+0x8>
	}
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	3730      	adds	r7, #48	; 0x30
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000ce4 	.word	0x20000ce4

08006204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800620a:	e045      	b.n	8006298 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800620c:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006216:	4b2a      	ldr	r3, [pc, #168]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3304      	adds	r3, #4
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd fcf1 	bl	8003c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d12e      	bne.n	8006298 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d90e      	bls.n	800626a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006258:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f7fd fc99 	bl	8003b9a <vListInsert>
 8006268:	e016      	b.n	8006298 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800626a:	2300      	movs	r3, #0
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fd9d 	bl	8005db4 <xTimerGenericCommand>
 800627a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1b4      	bne.n	800620c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <prvSwitchTimerLists+0xc0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <prvSwitchTimerLists+0xbc>)
 80062ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <prvSwitchTimerLists+0xc0>)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000cdc 	.word	0x20000cdc
 80062c4:	20000ce0 	.word	0x20000ce0

080062c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062ce:	f000 f969 	bl	80065a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <prvCheckForValidListAndQueue+0x60>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d120      	bne.n	800631c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062da:	4814      	ldr	r0, [pc, #80]	; (800632c <prvCheckForValidListAndQueue+0x64>)
 80062dc:	f7fd fc0c 	bl	8003af8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062e0:	4813      	ldr	r0, [pc, #76]	; (8006330 <prvCheckForValidListAndQueue+0x68>)
 80062e2:	f7fd fc09 	bl	8003af8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <prvCheckForValidListAndQueue+0x6c>)
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <prvCheckForValidListAndQueue+0x64>)
 80062ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062ec:	4b12      	ldr	r3, [pc, #72]	; (8006338 <prvCheckForValidListAndQueue+0x70>)
 80062ee:	4a10      	ldr	r2, [pc, #64]	; (8006330 <prvCheckForValidListAndQueue+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062f2:	2300      	movs	r3, #0
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <prvCheckForValidListAndQueue+0x74>)
 80062f8:	4a11      	ldr	r2, [pc, #68]	; (8006340 <prvCheckForValidListAndQueue+0x78>)
 80062fa:	2110      	movs	r1, #16
 80062fc:	200a      	movs	r0, #10
 80062fe:	f7fd fd17 	bl	8003d30 <xQueueGenericCreateStatic>
 8006302:	4603      	mov	r3, r0
 8006304:	4a08      	ldr	r2, [pc, #32]	; (8006328 <prvCheckForValidListAndQueue+0x60>)
 8006306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <prvCheckForValidListAndQueue+0x60>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <prvCheckForValidListAndQueue+0x60>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	490b      	ldr	r1, [pc, #44]	; (8006344 <prvCheckForValidListAndQueue+0x7c>)
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fbc4 	bl	8004aa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800631c:	f000 f972 	bl	8006604 <vPortExitCritical>
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000ce4 	.word	0x20000ce4
 800632c:	20000cb4 	.word	0x20000cb4
 8006330:	20000cc8 	.word	0x20000cc8
 8006334:	20000cdc 	.word	0x20000cdc
 8006338:	20000ce0 	.word	0x20000ce0
 800633c:	20000d90 	.word	0x20000d90
 8006340:	20000cf0 	.word	0x20000cf0
 8006344:	08006d18 	.word	0x08006d18

08006348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3b04      	subs	r3, #4
 8006358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b04      	subs	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006378:	4a0c      	ldr	r2, [pc, #48]	; (80063ac <pxPortInitialiseStack+0x64>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b14      	subs	r3, #20
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b04      	subs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f06f 0202 	mvn.w	r2, #2
 8006396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b20      	subs	r3, #32
 800639c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	080063b1 	.word	0x080063b1

080063b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <prvTaskExitError+0x54>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d00a      	beq.n	80063da <prvTaskExitError+0x2a>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <prvTaskExitError+0x28>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60bb      	str	r3, [r7, #8]
}
 80063ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ee:	bf00      	nop
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0fc      	beq.n	80063f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	200000cc 	.word	0x200000cc
	...

08006410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <pxCurrentTCBConst2>)
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	f380 8809 	msr	PSP, r0
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8811 	msr	BASEPRI, r0
 800642a:	4770      	bx	lr
 800642c:	f3af 8000 	nop.w

08006430 <pxCurrentTCBConst2>:
 8006430:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006438:	4808      	ldr	r0, [pc, #32]	; (800645c <prvPortStartFirstTask+0x24>)
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	6800      	ldr	r0, [r0, #0]
 800643e:	f380 8808 	msr	MSP, r0
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8814 	msr	CONTROL, r0
 800644a:	b662      	cpsie	i
 800644c:	b661      	cpsie	f
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	df00      	svc	0
 8006458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800645a:	bf00      	nop
 800645c:	e000ed08 	.word	0xe000ed08

08006460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006466:	4b46      	ldr	r3, [pc, #280]	; (8006580 <xPortStartScheduler+0x120>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a46      	ldr	r2, [pc, #280]	; (8006584 <xPortStartScheduler+0x124>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d10a      	bne.n	8006486 <xPortStartScheduler+0x26>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006486:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <xPortStartScheduler+0x120>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3f      	ldr	r2, [pc, #252]	; (8006588 <xPortStartScheduler+0x128>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10a      	bne.n	80064a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60fb      	str	r3, [r7, #12]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <xPortStartScheduler+0x12c>)
 80064a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	4b31      	ldr	r3, [pc, #196]	; (8006590 <xPortStartScheduler+0x130>)
 80064cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ce:	4b31      	ldr	r3, [pc, #196]	; (8006594 <xPortStartScheduler+0x134>)
 80064d0:	2207      	movs	r2, #7
 80064d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064d4:	e009      	b.n	80064ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064d6:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <xPortStartScheduler+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3b01      	subs	r3, #1
 80064dc:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <xPortStartScheduler+0x134>)
 80064de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d0ef      	beq.n	80064d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064f6:	4b27      	ldr	r3, [pc, #156]	; (8006594 <xPortStartScheduler+0x134>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1c3 0307 	rsb	r3, r3, #7
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d00a      	beq.n	8006518 <xPortStartScheduler+0xb8>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60bb      	str	r3, [r7, #8]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006518:	4b1e      	ldr	r3, [pc, #120]	; (8006594 <xPortStartScheduler+0x134>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <xPortStartScheduler+0x134>)
 8006520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <xPortStartScheduler+0x134>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800652a:	4a1a      	ldr	r2, [pc, #104]	; (8006594 <xPortStartScheduler+0x134>)
 800652c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	b2da      	uxtb	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <xPortStartScheduler+0x138>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <xPortStartScheduler+0x138>)
 800653c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <xPortStartScheduler+0x138>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a14      	ldr	r2, [pc, #80]	; (8006598 <xPortStartScheduler+0x138>)
 8006548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800654c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800654e:	f000 f8dd 	bl	800670c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <xPortStartScheduler+0x13c>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006558:	f000 f8fc 	bl	8006754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <xPortStartScheduler+0x140>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0f      	ldr	r2, [pc, #60]	; (80065a0 <xPortStartScheduler+0x140>)
 8006562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006568:	f7ff ff66 	bl	8006438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800656c:	f7fe ff70 	bl	8005450 <vTaskSwitchContext>
	prvTaskExitError();
 8006570:	f7ff ff1e 	bl	80063b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	e000ed00 	.word	0xe000ed00
 8006584:	410fc271 	.word	0x410fc271
 8006588:	410fc270 	.word	0x410fc270
 800658c:	e000e400 	.word	0xe000e400
 8006590:	20000de0 	.word	0x20000de0
 8006594:	20000de4 	.word	0x20000de4
 8006598:	e000ed20 	.word	0xe000ed20
 800659c:	200000cc 	.word	0x200000cc
 80065a0:	e000ef34 	.word	0xe000ef34

080065a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	607b      	str	r3, [r7, #4]
}
 80065bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <vPortEnterCritical+0x58>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <vPortEnterCritical+0x58>)
 80065c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <vPortEnterCritical+0x58>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10f      	bne.n	80065f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <vPortEnterCritical+0x5c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	603b      	str	r3, [r7, #0]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vPortEnterCritical+0x4a>
	}
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	200000cc 	.word	0x200000cc
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <vPortExitCritical+0x50>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <vPortExitCritical+0x24>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	607b      	str	r3, [r7, #4]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <vPortExitCritical+0x50>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <vPortExitCritical+0x50>)
 8006630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <vPortExitCritical+0x50>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d105      	bne.n	8006646 <vPortExitCritical+0x42>
 800663a:	2300      	movs	r3, #0
 800663c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f383 8811 	msr	BASEPRI, r3
}
 8006644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	200000cc 	.word	0x200000cc
	...

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006684:	f380 8811 	msr	BASEPRI, r0
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f7fe fede 	bl	8005450 <vTaskSwitchContext>
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f380 8811 	msr	BASEPRI, r0
 800669c:	bc09      	pop	{r0, r3}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a6:	f01e 0f10 	tst.w	lr, #16
 80066aa:	bf08      	it	eq
 80066ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b0:	f380 8809 	msr	PSP, r0
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst>:
 80066c0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e2:	f7fe fdf7 	bl	80052d4 <xTaskIncrementTick>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ec:	4b06      	ldr	r3, [pc, #24]	; (8006708 <xPortSysTickHandler+0x40>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	2300      	movs	r3, #0
 80066f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f383 8811 	msr	BASEPRI, r3
}
 80066fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <vPortSetupTimerInterrupt+0x34>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <vPortSetupTimerInterrupt+0x38>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x3c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <vPortSetupTimerInterrupt+0x40>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	099b      	lsrs	r3, r3, #6
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <vPortSetupTimerInterrupt+0x44>)
 800672a:	3b01      	subs	r3, #1
 800672c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <vPortSetupTimerInterrupt+0x34>)
 8006730:	2207      	movs	r2, #7
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	e000e010 	.word	0xe000e010
 8006744:	e000e018 	.word	0xe000e018
 8006748:	200000c0 	.word	0x200000c0
 800674c:	10624dd3 	.word	0x10624dd3
 8006750:	e000e014 	.word	0xe000e014

08006754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006764 <vPortEnableVFP+0x10>
 8006758:	6801      	ldr	r1, [r0, #0]
 800675a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800675e:	6001      	str	r1, [r0, #0]
 8006760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006762:	bf00      	nop
 8006764:	e000ed88 	.word	0xe000ed88

08006768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800676e:	f3ef 8305 	mrs	r3, IPSR
 8006772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b0f      	cmp	r3, #15
 8006778:	d914      	bls.n	80067a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <vPortValidateInterruptPriority+0x70>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006784:	4b15      	ldr	r3, [pc, #84]	; (80067dc <vPortValidateInterruptPriority+0x74>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	7afa      	ldrb	r2, [r7, #11]
 800678a:	429a      	cmp	r2, r3
 800678c:	d20a      	bcs.n	80067a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <vPortValidateInterruptPriority+0x78>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <vPortValidateInterruptPriority+0x7c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d90a      	bls.n	80067ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	603b      	str	r3, [r7, #0]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <vPortValidateInterruptPriority+0x60>
	}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	e000e3f0 	.word	0xe000e3f0
 80067dc:	20000de0 	.word	0x20000de0
 80067e0:	e000ed0c 	.word	0xe000ed0c
 80067e4:	20000de4 	.word	0x20000de4

080067e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067f4:	f7fe fcb2 	bl	800515c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067f8:	4b58      	ldr	r3, [pc, #352]	; (800695c <pvPortMalloc+0x174>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006800:	f000 f910 	bl	8006a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006804:	4b56      	ldr	r3, [pc, #344]	; (8006960 <pvPortMalloc+0x178>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4013      	ands	r3, r2
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 808e 	bne.w	800692e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01d      	beq.n	8006854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006818:	2208      	movs	r2, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f023 0307 	bic.w	r3, r3, #7
 8006830:	3308      	adds	r3, #8
 8006832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <pvPortMalloc+0x6c>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	617b      	str	r3, [r7, #20]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d069      	beq.n	800692e <pvPortMalloc+0x146>
 800685a:	4b42      	ldr	r3, [pc, #264]	; (8006964 <pvPortMalloc+0x17c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d864      	bhi.n	800692e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006864:	4b40      	ldr	r3, [pc, #256]	; (8006968 <pvPortMalloc+0x180>)
 8006866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006868:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <pvPortMalloc+0x180>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800686e:	e004      	b.n	800687a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d903      	bls.n	800688c <pvPortMalloc+0xa4>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f1      	bne.n	8006870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800688c:	4b33      	ldr	r3, [pc, #204]	; (800695c <pvPortMalloc+0x174>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006892:	429a      	cmp	r2, r3
 8006894:	d04b      	beq.n	800692e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2208      	movs	r2, #8
 800689c:	4413      	add	r3, r2
 800689e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1ad2      	subs	r2, r2, r3
 80068b0:	2308      	movs	r3, #8
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d91f      	bls.n	80068f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4413      	add	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <pvPortMalloc+0xf8>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	613b      	str	r3, [r7, #16]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1ad2      	subs	r2, r2, r3
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068f2:	69b8      	ldr	r0, [r7, #24]
 80068f4:	f000 f8f8 	bl	8006ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <pvPortMalloc+0x17c>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	4a18      	ldr	r2, [pc, #96]	; (8006964 <pvPortMalloc+0x17c>)
 8006904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006906:	4b17      	ldr	r3, [pc, #92]	; (8006964 <pvPortMalloc+0x17c>)
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <pvPortMalloc+0x184>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d203      	bcs.n	800691a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <pvPortMalloc+0x17c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <pvPortMalloc+0x184>)
 8006918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <pvPortMalloc+0x178>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	431a      	orrs	r2, r3
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800692e:	f7fe fc23 	bl	8005178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <pvPortMalloc+0x16a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <pvPortMalloc+0x168>
	return pvReturn;
 8006952:	69fb      	ldr	r3, [r7, #28]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001d90 	.word	0x20001d90
 8006960:	20001d9c 	.word	0x20001d9c
 8006964:	20001d94 	.word	0x20001d94
 8006968:	20001d88 	.word	0x20001d88
 800696c:	20001d98 	.word	0x20001d98

08006970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d048      	beq.n	8006a14 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006982:	2308      	movs	r3, #8
 8006984:	425b      	negs	r3, r3
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <vPortFree+0xac>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <vPortFree+0x44>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60fb      	str	r3, [r7, #12]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <vPortFree+0x62>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	60bb      	str	r3, [r7, #8]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <vPortFree+0xac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d019      	beq.n	8006a14 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d115      	bne.n	8006a14 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <vPortFree+0xac>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069f8:	f7fe fbb0 	bl	800515c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <vPortFree+0xb0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4413      	add	r3, r2
 8006a06:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <vPortFree+0xb0>)
 8006a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a0a:	6938      	ldr	r0, [r7, #16]
 8006a0c:	f000 f86c 	bl	8006ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a10:	f7fe fbb2 	bl	8005178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20001d9c 	.word	0x20001d9c
 8006a20:	20001d94 	.word	0x20001d94

08006a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a2a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <prvHeapInit+0xac>)
 8006a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3307      	adds	r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <prvHeapInit+0xac>)
 8006a54:	4413      	add	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a62:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <prvHeapInit+0xb0>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a70:	2208      	movs	r2, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a86:	4b14      	ldr	r3, [pc, #80]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvHeapInit+0xb4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvHeapInit+0xb4>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <prvHeapInit+0xb8>)
 8006ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <prvHeapInit+0xbc>)
 8006aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <prvHeapInit+0xc0>)
 8006abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20000de8 	.word	0x20000de8
 8006ad4:	20001d88 	.word	0x20001d88
 8006ad8:	20001d90 	.word	0x20001d90
 8006adc:	20001d98 	.word	0x20001d98
 8006ae0:	20001d94 	.word	0x20001d94
 8006ae4:	20001d9c 	.word	0x20001d9c

08006ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <prvInsertBlockIntoFreeList+0xac>)
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e002      	b.n	8006afc <prvInsertBlockIntoFreeList+0x14>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d8f7      	bhi.n	8006af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d108      	bne.n	8006b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d118      	bne.n	8006b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d00d      	beq.n	8006b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e008      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <prvInsertBlockIntoFreeList+0xb0>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d002      	beq.n	8006b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20001d88 	.word	0x20001d88
 8006b98:	20001d90 	.word	0x20001d90

08006b9c <__libc_init_array>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	4d0d      	ldr	r5, [pc, #52]	; (8006bd4 <__libc_init_array+0x38>)
 8006ba0:	4c0d      	ldr	r4, [pc, #52]	; (8006bd8 <__libc_init_array+0x3c>)
 8006ba2:	1b64      	subs	r4, r4, r5
 8006ba4:	10a4      	asrs	r4, r4, #2
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	42a6      	cmp	r6, r4
 8006baa:	d109      	bne.n	8006bc0 <__libc_init_array+0x24>
 8006bac:	4d0b      	ldr	r5, [pc, #44]	; (8006bdc <__libc_init_array+0x40>)
 8006bae:	4c0c      	ldr	r4, [pc, #48]	; (8006be0 <__libc_init_array+0x44>)
 8006bb0:	f000 f82e 	bl	8006c10 <_init>
 8006bb4:	1b64      	subs	r4, r4, r5
 8006bb6:	10a4      	asrs	r4, r4, #2
 8006bb8:	2600      	movs	r6, #0
 8006bba:	42a6      	cmp	r6, r4
 8006bbc:	d105      	bne.n	8006bca <__libc_init_array+0x2e>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc4:	4798      	blx	r3
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7ee      	b.n	8006ba8 <__libc_init_array+0xc>
 8006bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bce:	4798      	blx	r3
 8006bd0:	3601      	adds	r6, #1
 8006bd2:	e7f2      	b.n	8006bba <__libc_init_array+0x1e>
 8006bd4:	08006e90 	.word	0x08006e90
 8006bd8:	08006e90 	.word	0x08006e90
 8006bdc:	08006e90 	.word	0x08006e90
 8006be0:	08006e94 	.word	0x08006e94

08006be4 <memcpy>:
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bec:	d100      	bne.n	8006bf0 <memcpy+0xc>
 8006bee:	4770      	bx	lr
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	d1f9      	bne.n	8006bf2 <memcpy+0xe>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <memset>:
 8006c00:	4402      	add	r2, r0
 8006c02:	4603      	mov	r3, r0
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d100      	bne.n	8006c0a <memset+0xa>
 8006c08:	4770      	bx	lr
 8006c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0e:	e7f9      	b.n	8006c04 <memset+0x4>

08006c10 <_init>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr

08006c1c <_fini>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr
